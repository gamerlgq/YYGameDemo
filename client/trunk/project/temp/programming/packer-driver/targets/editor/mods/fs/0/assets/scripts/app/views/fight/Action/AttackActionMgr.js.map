{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/GameDemoReal/assets/scripts/app/views/fight/action/AttackActionMgr.ts"],"names":["AttackActionMgr","log","tween","Singleton","G","FightEvent","fightEventMgr","FightConstant","fightActionMgr","attackActionMgr","init","getInstance","parse","data","attackData","Attack","attackActionId","FightAttackAction","Action_Fail","Action_Skill","_parseSkill","Action_Buff","skillId","config","getConfig","skillAnimation","hitConfig","skillTimeline","length","_runSkillTimelineAction","unitHitTimeline","attackUnitTimeline","_runAttackUnitTimelineAction","allTimeLine","ownUnit","getOwnUnit","whom","tarUnit","getUnit","forEach","animations","oneTimeTween","anim","fightActionData","own","target","result","undefined","animCfg","getAnimation","then","push","parallel","call","send","Attack_End","start","t","unitTimeline","destory","destoryInstance","clear"],"mappings":"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","sourcesContent":["import { log, tween, Tween } from \"cc\";\nimport { Singleton } from \"../../../../framework/components/Singleton\";\nimport { G } from \"../../../common/GlobalFunction\";\nimport { FightEvent } from \"../event/FightEvent\";\nimport { FightEventDataType } from \"../event/FightEventDataType\";\nimport { fightEventMgr } from \"../event/FightEventMgr\";\nimport { FightConstant } from \"../FightConstant\";\nimport { FightActionData, fightActionMgr } from \"./FightActionMgr\";\n\n\nexport let attackActionMgr:AttackActionMgr = null;\n/**\n * @description 攻击行动管理器 \n * */\nexport class AttackActionMgr extends Singleton{\n    public static init(){\n        attackActionMgr = AttackActionMgr.getInstance<AttackActionMgr>();\n    }\n\n    public parse(data:FightEventDataType.Action_Data){\n        let attackData = data.Attack;\n        let attackActionId = attackData[0];\n        switch (attackActionId) {\n            case FightConstant.FightAttackAction.Action_Fail:// 攻击失败\n                \n                break;\n            case FightConstant.FightAttackAction.Action_Skill://技能攻击\n                this._parseSkill(data)\n                break;\n            case FightConstant.FightAttackAction.Action_Buff://直接伤害(一些dot，每回合的伤害/每回合治疗等)\n\n                break;\n        }\n    }\n\n    private _parseSkill(data:FightEventDataType.Action_Data) {\n        let attackData = data.Attack;\n        let skillId = attackData[1];\n        let config = G.getConfig(\"FightSkill\",skillId);\n\n        let skillAnimation = config.skillAnimation;\n        let hitConfig = G.getConfig(\"FightHit\",skillAnimation);\n\n        // 全局技能时间轴\n        let skillTimeline = hitConfig.skillTimeline;\n        if (skillTimeline.length > 0){\n            this._runSkillTimelineAction(skillTimeline,data);\n        }\n\n        // 攻击单位时间轴\n        let unitHitTimeline = hitConfig.attackUnitTimeline;\n        if (unitHitTimeline.length > 0){\n            this._runAttackUnitTimelineAction(unitHitTimeline,data);\n        }\n    } \n\n    private _runSkillTimelineAction(skillTimeline:Array<any>,data:FightEventDataType.Action_Data) {\n        let allTimeLine:Tween<unknown>[] = [];\n        let ownUnit = fightActionMgr.getOwnUnit(data);\n        let attackData = data.Attack;\n        let whom = attackData[2];\n        let tarUnit = null;\n        if (whom.length>0){\n            tarUnit = fightActionMgr.getUnit(whom);\n        }\n            \n        skillTimeline.forEach(animations => {\n            let oneTimeTween = tween();\n            animations.forEach(anim => {\n                let fightActionData:FightActionData = {\n                    own: ownUnit,\n                    target:tarUnit,\n                    result: undefined,\n                    animCfg:anim\n                };\n                let tween = fightActionMgr.getAnimation(fightActionData);\n                oneTimeTween.then(tween);\n            });\n            allTimeLine.push(oneTimeTween);\n        });\n\n        if (allTimeLine.length > 1){\n            let parallel = tween(ownUnit).parallel(...allTimeLine);\n            parallel.call(()=>{\n                log(\"attack action finished!\")\n                // 攻击结束\n                fightEventMgr.send(new FightEvent(FightConstant.FightEvent.Attack_End,data));\n            }).start();\n        }else{\n            let t = allTimeLine[0];\n            t.target(ownUnit).call(()=>{\n                log(\"attack action finished!\")\n                // 攻击结束\n                fightEventMgr.send(new FightEvent(FightConstant.FightEvent.Attack_End,data));\n            }).start();\n        } \n    }\n\n\n    private _runAttackUnitTimelineAction(unitTimeline:Array<any>,data:FightEventDataType.Action_Data) {\n        let allTimeLine:Tween<unknown>[] = [];\n        let ownUnit = fightActionMgr.getOwnUnit(data);\n        let attackData = data.Attack;\n        let whom = attackData[2];\n        let tarUnit = null;\n        if (whom.length>0){\n            tarUnit = fightActionMgr.getUnit(whom);\n        }\n            \n        unitTimeline.forEach(animations => {\n            let oneTimeTween = tween();\n            animations.forEach(anim => {\n                let fightActionData:FightActionData = {\n                    own: ownUnit,\n                    target:tarUnit,\n                    result: undefined,\n                    animCfg:anim\n                };\n                let tween = fightActionMgr.getAnimation(fightActionData);\n                oneTimeTween.then(tween);\n            });\n            allTimeLine.push(oneTimeTween);\n        });\n\n        if (allTimeLine.length > 1){\n            let parallel = tween(ownUnit).parallel(...allTimeLine);\n            parallel.call(()=>{\n                log(\"attack action finished!\")\n                // 攻击结束\n                fightEventMgr.send(new FightEvent(FightConstant.FightEvent.Attack_End,data));\n            }).start();\n        }else{\n            let t = allTimeLine[0];\n            t.target(ownUnit).call(()=>{\n                log(\"attack action finished!\")\n                // 攻击结束\n                fightEventMgr.send(new FightEvent(FightConstant.FightEvent.Attack_End,data));\n            }).start();\n        } \n    }\n\n    public destory(){\n        AttackActionMgr.destoryInstance();\n    }\n\n    public clear(){\n        attackActionMgr = null;\n    }\n}"]}