{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/GameDemoReal/assets/scripts/framework/ui/ListView.ts"],"names":["Component","instantiate","Node","NodePool","ScrollView","UITransform","Vec3","_decorator","ccclass","property","itemIndex","Set","vec3","ListView","Map","items","Number","MIN_SAFE_INTEGER","onLoad","scrollView","getComponent","itemHeight","itemTemplate","height","itemPool","put","visibleHeight","node","spawnCount","Math","round","ensure","console","log","setDelegate","delegate","reload","dataSource","totalHeight","length","spaceY","max","content","children","slice","forEach","c","_children","visibleNodes","clear","stopAutoScroll","scrollToTop","lastY","count","size","lateUpdate","y","floor","getScrollOffset","getVisibleItemIndex","idx","has","unuse","delete","get","getPosition","setPosition","parent","reuse","set","minY","maxY","totalCount","min","i","add"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,S,OAAAA,S;AAAWC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,U,OAAAA,U;;;;;;;OAC1E;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBF,U;AAQ9B;AACMG,MAAAA,S,GAAY,IAAIC,GAAJ,E;AACZC,MAAAA,I,GAAO,IAAIN,IAAJ,E;;0BAEAO,Q,WADZL,OAAO,CAAC,UAAD,C,UAELC,QAAQ,CAACP,IAAD,C,oCAFX,MACaW,QADb,SAC8Bb,SAD9B,CACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,4CAKT,IAAIG,QAAJ,EALS;;AAAA,8CAMX,EANW;;AAAA;;AAAA;;AAAA,gDASf,IAAIW,GAAJ,EATe;;AAAA,4CAUI;AAAEC,YAAAA,KAAK,EAAE,MAAM;AAAf,WAVJ;;AAAA,yCA+CtBC,MAAM,CAACC,gBA/Ce;AAAA;;AAYtCC,QAAAA,MAAM,GAAG;AACP,eAAKC,UAAL,GAAkB,KAAKC,YAAL,CAAkBhB,UAAlB,CAAlB;AACA,eAAKiB,UAAL,GAAkB,KAAKC,YAAL,CAAkBF,YAAlB,CAA+Bf,WAA/B,EAA4CkB,MAA9D;AACA,eAAKC,QAAL,CAAcC,GAAd,CAAkB,KAAKH,YAAvB;AACA,eAAKI,aAAL,GAAqB,KAAKC,IAAL,CAAUP,YAAV,CAAuBf,WAAvB,EAAoCkB,MAAzD;AACA,eAAKK,UAAL,GAAkBC,IAAI,CAACC,KAAL,CAAW,KAAKJ,aAAL,GAAqB,KAAKL,UAArC,IAAmD,CAArE;AACA,eAAKU,MAAL,CAAY,KAAKH,UAAjB;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKP,aAA5C,EAA2D,aAA3D,EAA0E,KAAKE,UAA/E,EAA2F,aAA3F,EAA0G,KAAKP,UAA/G;AACD;;AAEDa,QAAAA,WAAW,CAAIC,QAAJ,EAAkC;AAC3C,eAAKA,QAAL,GAAgBA,QAAhB;AACD;;AAEDC,QAAAA,MAAM,GAAG;AACP,eAAKC,UAAL,GAAkB,KAAKF,QAAL,CAAcpB,KAAd,EAAlB;AACA,gBAAMuB,WAAW,GAAG,KAAKjB,UAAL,GAAkB,KAAKgB,UAAL,CAAgBE,MAAlC,GAA4C,KAAKC,MAAL,GAAcX,IAAI,CAACY,GAAL,CAAS,CAAT,EAAY,KAAKJ,UAAL,CAAgBE,MAAhB,GAAyB,CAArC,CAA9E;AACA,eAAKpB,UAAL,CAAgBuB,OAAhB,CAAwBtB,YAAxB,CAAqCf,WAArC,EAAkDkB,MAAlD,GAA2De,WAA3D;AACA,gBAAMK,QAAQ,GAAG,KAAKxB,UAAL,CAAgBuB,OAAhB,CAAwBC,QAAxB,CAAiCC,KAAjC,EAAjB;AACAD,UAAAA,QAAQ,CAACE,OAAT,CAAiBC,CAAC,IAAI,KAAKtB,QAAL,CAAcC,GAAd,CAAkBqB,CAAlB,CAAtB,EALO,CAKuC;AAC9C;;AACA,eAAK3B,UAAL,CAAgBuB,OAAhB,CAAwBK,SAAxB,CAAkCR,MAAlC,GAA2C,CAA3C;AACA,eAAKS,YAAL,CAAkBC,KAAlB;AACA,eAAK9B,UAAL,CAAgB+B,cAAhB;AACA,eAAK/B,UAAL,CAAgBgC,WAAhB,CAA4B,CAA5B,EAA+B,KAA/B;AACA,eAAKC,KAAL,GAAapC,MAAM,CAACC,gBAApB;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,KAAKI,UAAL,CAAgBE,MAA3D;AACD;;AAEDR,QAAAA,MAAM,CAACsB,KAAD,EAAgB;AACpB,iBAAO,KAAK7B,QAAL,CAAc8B,IAAd,KAAuBD,KAA9B,EAAqC;AACnC,iBAAK7B,QAAL,CAAcC,GAAd,CAAkBxB,WAAW,CAAC,KAAKqB,YAAN,CAA7B;AACD;AACF;;AAGDiC,QAAAA,UAAU,GAAG;AACX,gBAAMC,CAAC,GAAG3B,IAAI,CAAC4B,KAAL,CAAW,KAAKtC,UAAL,CAAgBuC,eAAhB,GAAkCF,CAA7C,CAAV;;AACA,cAAI,KAAKJ,KAAL,IAAcI,CAAlB,EAAqB;AACnB,iBAAKJ,KAAL,GAAaI,CAAb;AACA,iBAAKG,mBAAL,CAAyBH,CAAzB;AACA,iBAAKR,YAAL,CAAkBH,OAAlB,CAA0B,CAAClB,IAAD,EAAOiC,GAAP,KAAe;AACvC,kBAAI,CAAClD,SAAS,CAACmD,GAAV,CAAcD,GAAd,CAAL,EAAyB;AACvB,qBAAKzB,QAAL,CAAc2B,KAAd,IAAuB,KAAK3B,QAAL,CAAc2B,KAAd,CAAoBnC,IAApB,CAAvB;AACA,qBAAKH,QAAL,CAAcC,GAAd,CAAkBE,IAAlB;AACA,qBAAKqB,YAAL,CAAkBe,MAAlB,CAAyBH,GAAzB;AACD;AACF,aAND;AAOAlD,YAAAA,SAAS,CAACmC,OAAV,CAAmBe,GAAD,IAAS;AACzB,kBAAI,CAAC,KAAKZ,YAAL,CAAkBa,GAAlB,CAAsBD,GAAtB,CAAL,EAAiC;AAC/B,qBAAK7B,MAAL,CAAY,CAAZ;AACA,sBAAMJ,IAAI,GAAG,KAAKH,QAAL,CAAcwC,GAAd,EAAb;AACArC,gBAAAA,IAAI,CAACsC,WAAL,CAAiBrD,IAAjB;AACAA,gBAAAA,IAAI,CAAC4C,CAAL,GAAS,CAAC,CAACI,GAAD,GAAO,GAAR,IAAe,KAAKvC,UAApB,GAAiC,KAAKmB,MAAL,GAAcoB,GAAxD;AACAjC,gBAAAA,IAAI,CAACuC,WAAL,CAAiBtD,IAAjB;AACAe,gBAAAA,IAAI,CAACwC,MAAL,GAAc,KAAKhD,UAAL,CAAgBuB,OAA9B;AACA,qBAAKP,QAAL,CAAciC,KAAd,IAAuB,KAAKjC,QAAL,CAAciC,KAAd,CAAoBzC,IAApB,EAA0B,KAAKU,UAAL,CAAgBuB,GAAhB,CAA1B,CAAvB;AACA,qBAAKZ,YAAL,CAAkBqB,GAAlB,CAAsBT,GAAtB,EAA2BjC,IAA3B;AACD;AACF,aAXD;AAYD;AACF;;AAEDgC,QAAAA,mBAAmB,CAACH,CAAD,EAAY;AAC7B,cAAIc,IAAI,GAAGzC,IAAI,CAACY,GAAL,CAAS,CAAT,EAAYZ,IAAI,CAAC4B,KAAL,CAAWD,CAAC,IAAI,KAAKnC,UAAL,GAAkB,KAAKmB,MAA3B,CAAZ,CAAZ,CAAX;AACA,cAAI+B,IAAI,GAAGD,IAAI,IAAI,CAAR,GAAY,KAAK1C,UAAjB,GAA8BC,IAAI,CAACC,KAAL,CAAW,CAAC0B,CAAC,GAAG,KAAK9B,aAAV,KAA4B,KAAKL,UAAL,GAAkB,KAAKmB,MAAnD,CAAX,CAAzC;AACA,gBAAMgC,UAAU,GAAG,KAAKnC,UAAL,CAAgBE,MAAnC;AACAgC,UAAAA,IAAI,GAAG1C,IAAI,CAAC4C,GAAL,CAASF,IAAT,EAAeC,UAAf,CAAP;;AACA,cAAID,IAAI,IAAIC,UAAZ,EAAwB;AACtBF,YAAAA,IAAI,GAAGzC,IAAI,CAACY,GAAL,CAAS,CAAT,EAAY+B,UAAU,GAAG,KAAK5C,UAA9B,CAAP;AACD;;AACDlB,UAAAA,SAAS,CAACuC,KAAV;;AACA,eAAK,IAAIyB,CAAC,GAAGJ,IAAb,EAAmBI,CAAC,GAAGJ,IAAI,GAAG,KAAK1C,UAAhB,IAA8B8C,CAAC,GAAGF,UAArD,EAAiEE,CAAC,EAAlE,EAAsE;AACpEhE,YAAAA,SAAS,CAACiE,GAAV,CAAcD,CAAd;AACD;AACF;;AAvFqC,O;;;;;iFAErCjE,Q;;;;;iBAAkB,C","sourcesContent":["\nimport { Component, instantiate, Node, NodePool, ScrollView, UITransform, Vec3, _decorator } from 'cc';\nconst { ccclass, property } = _decorator;\n\nexport interface ListViewDelegate<T>{\n  items(): T[];\n  reuse?(itemNode:Node, item:T): void;\n  unuse?(itemNode:Node): void;\n}\n\n// temp val\nconst itemIndex = new Set<number>();\nconst vec3 = new Vec3;\n@ccclass('ListView')\nexport class ListView extends Component {\n  @property(Node) itemTemplate: Node;\n  @property spaceY = 0;\n  scrollView: ScrollView;\n  private itemHeight:number;\n  private itemPool: NodePool = new NodePool();\n  private dataSource:any[] = [];\n  private visibleHeight: number;\n  private spawnCount: number;\n  private visibleNodes = new Map<number, Node>();\n  private delegate: ListViewDelegate<any> = { items: () => [] };\n\n  onLoad() {\n    this.scrollView = this.getComponent(ScrollView);\n    this.itemHeight = this.itemTemplate.getComponent(UITransform).height;\n    this.itemPool.put(this.itemTemplate);\n    this.visibleHeight = this.node.getComponent(UITransform).height;\n    this.spawnCount = Math.round(this.visibleHeight / this.itemHeight) + 1;\n    this.ensure(this.spawnCount);\n    console.log('ListView visibleHeight:', this.visibleHeight, 'spawnCount:', this.spawnCount, 'itemHeight:', this.itemHeight);\n  }\n\n  setDelegate<T>(delegate:ListViewDelegate<T>) {\n    this.delegate = delegate;\n  }\n\n  reload() {\n    this.dataSource = this.delegate.items();\n    const totalHeight = this.itemHeight * this.dataSource.length + (this.spaceY * Math.max(0, this.dataSource.length - 1));\n    this.scrollView.content.getComponent(UITransform).height = totalHeight;\n    const children = this.scrollView.content.children.slice();\n    children.forEach(c => this.itemPool.put(c));  // [warning] not call unuse\n    // @ts-ignore\n    this.scrollView.content._children.length = 0;\n    this.visibleNodes.clear();\n    this.scrollView.stopAutoScroll();\n    this.scrollView.scrollToTop(0, false);\n    this.lastY = Number.MIN_SAFE_INTEGER;\n    console.log('ListView reload totalCount:', this.dataSource.length);\n  }\n\n  ensure(count: number) {\n    while (this.itemPool.size() < count) {\n      this.itemPool.put(instantiate(this.itemTemplate));\n    }\n  }\n\n  lastY: number = Number.MIN_SAFE_INTEGER;\n  lateUpdate() {\n    const y = Math.floor(this.scrollView.getScrollOffset().y);\n    if (this.lastY != y) {\n      this.lastY = y;\n      this.getVisibleItemIndex(y);\n      this.visibleNodes.forEach((node, idx) => {\n        if (!itemIndex.has(idx)) {\n          this.delegate.unuse && this.delegate.unuse(node);\n          this.itemPool.put(node);\n          this.visibleNodes.delete(idx);\n        }\n      });\n      itemIndex.forEach((idx) => {\n        if (!this.visibleNodes.has(idx)) {\n          this.ensure(1);\n          const node = this.itemPool.get();\n          node.getPosition(vec3);\n          vec3.y = (-idx - 0.5) * this.itemHeight - this.spaceY * idx;\n          node.setPosition(vec3);\n          node.parent = this.scrollView.content;\n          this.delegate.reuse && this.delegate.reuse(node, this.dataSource[idx]);\n          this.visibleNodes.set(idx, node);\n        }\n      });\n    }\n  }\n\n  getVisibleItemIndex(y: number) {\n    let minY = Math.max(0, Math.floor(y / (this.itemHeight + this.spaceY)));\n    let maxY = minY == 0 ? this.spawnCount : Math.round((y + this.visibleHeight) / (this.itemHeight + this.spaceY));\n    const totalCount = this.dataSource.length;\n    maxY = Math.min(maxY, totalCount);\n    if (maxY == totalCount) {\n      minY = Math.max(0, totalCount - this.spawnCount);\n    }\n    itemIndex.clear();\n    for (let i = minY; i < minY + this.spawnCount && i < totalCount; i++) {\n      itemIndex.add(i);\n    }\n  }\n}\n\n"]}