{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/app/views/fight/action/FightActionMgr.ts"],"names":["FightActionMgr","Singleton","FightEvent","fightEventMgr","FightConstant","RoleLayer","AcitonJump","ActionAddPrefab","ActionDelay","ActionGoBack","ActionMove","ActionSpineAnim","ActionHide","ActionShow","attackActionMgr","AttackActionMgr","resultActionMgr","ResultActionMgr","fightActionMgr","init","mainLayer","getInstance","_init","_fightMainLayer","_fightMainWorld","getFightMainWorld","_tempActionList","Array","_initListeners","addEventListener","Attack_Start","_onAttackStart","bind","Attack_End","_onAttackEnd","Result_Start","_onResultStart","Result_End","_onResultEnd","event","data","getEventData","_parseAttack","_parseResult","length","send","Action_End","parse","getAnimation","animCfg","cmd","cmdEnum","_getUnitActionEnumByName","FightUnitAction","AddPrefab","getUnitAction","add","Delay","delay","SpineAnimation","play","Color","GoBack","goBack","Hide","hide","params","Show","show","Move","move","Jump","jump","clas","anim","push","getOwnUnit","getUnit","Who","who","camp","index","com","getCommonentInLayer","FightLayer","ROLE","FightUnitType","Attack","getRoleAttacker","Defend","getRoleDefender","getUnitPos","pos","getFomationPos","name","FightUnitActionString","layerIndex","layerCtor","destory","destoryInstance","clear"],"mappings":";;;+QA6BaA,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5BJC,MAAAA,S,iBAAAA,S;;AAEAC,MAAAA,U,iBAAAA,U;;AAEAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,a,iBAAAA,a;;AAIAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,e,iBAAAA,e;AAA6BC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,Y,iBAAAA,Y;AAAcC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,e,iBAAAA,e;;AAChFC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,e,kBAAAA,e;AAAiBC,MAAAA,e,kBAAAA,e;;AACjBC,MAAAA,e,kBAAAA,e;AAAiBC,MAAAA,e,kBAAAA,e;;;;;;;gCAUfC,c,GAAgC,I;AAC3C;AACA;AACA;;;gCACalB,c,GAAN,MAAMA,cAAN;AAAA;AAAA,kCAAsC;AAAA;AAAA;;AAAA,mDAEA,IAFA;;AAAA,mDAIA,IAJA;;AAAA,mDAMF,IANE;AAAA;;AAQvB,eAAJmB,IAAI,CAACC,SAAD,EAA0B;AACxC,oCAAAF,cAAc,GAAGlB,cAAc,CAACqB,WAAf,EAAjB;;AACAH,UAAAA,cAAc,CAACI,KAAf,CAAqBF,SAArB;AACH;;AAEOE,QAAAA,KAAK,CAACF,SAAD,EAA2B;AACpC,eAAKG,eAAL,GAAuBH,SAAvB;AACA,eAAKI,eAAL,GAAuB,KAAKD,eAAL,CAAqBE,iBAArB,EAAvB;AACA,eAAKC,eAAL,GAAuB,IAAIC,KAAJ,EAAvB;AACA;AAAA;AAAA,kDAAgBR,IAAhB;AACA;AAAA;AAAA,kDAAgBA,IAAhB;;AACA,eAAKS,cAAL;AACH;;AAEOA,QAAAA,cAAc,GAAG;AACrB;AAAA;AAAA,8CAAcC,gBAAd,CAA+B;AAAA;AAAA,8CAAc3B,UAAd,CAAyB4B,YAAxD,EAAqE,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAArE;AACA;AAAA;AAAA,8CAAcH,gBAAd,CAA+B;AAAA;AAAA,8CAAc3B,UAAd,CAAyB+B,UAAxD,EAAmE,KAAKC,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAAnE;AACA;AAAA;AAAA,8CAAcH,gBAAd,CAA+B;AAAA;AAAA,8CAAc3B,UAAd,CAAyBiC,YAAxD,EAAqE,KAAKC,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAArE;AACA;AAAA;AAAA,8CAAcH,gBAAd,CAA+B;AAAA;AAAA,8CAAc3B,UAAd,CAAyBmC,UAAxD,EAAmE,KAAKC,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAAnE;AACH;;AAEOD,QAAAA,cAAc,CAACQ,KAAD,EAAmB;AACrC,cAAI,CAAC,KAAKf,eAAV,EAA0B;AACtB,iBAAKA,eAAL,GAAuB,KAAKD,eAAL,CAAqBE,iBAArB,EAAvB;AACH;;AACD,cAAIe,IAAmC,GAAGD,KAAK,CAACE,YAAN,EAA1C;;AACA,eAAKC,YAAL,CAAkBF,IAAlB;AACH;;AAGON,QAAAA,YAAY,CAACK,KAAD,EAAmB,CAEtC;;AAEOH,QAAAA,cAAc,CAACG,KAAD,EAAmB;AACrC,cAAIC,IAAmC,GAAGD,KAAK,CAACE,YAAN,EAA1C;;AACA,eAAKE,YAAL,CAAkBH,IAAlB;AACH;;AAEOF,QAAAA,YAAY,CAACC,KAAD,EAAmB;AACnC;AACA,eAAKb,eAAL,CAAqBkB,MAArB,GAA8B,CAA9B;AACA;AAAA;AAAA,8CAAcC,IAAd,CAAmB;AAAA;AAAA,wCAAe;AAAA;AAAA,8CAAc3C,UAAd,CAAyB4C,UAAxC,EAAmD,IAAnD,CAAnB;AACH;;AAEOJ,QAAAA,YAAY,CAACF,IAAD,EAAsC;AACtD;AAAA;AAAA,kDAAgBO,KAAhB,CAAsBP,IAAtB;AACH;AAED;AACJ;AACA;AACA;;;AACYG,QAAAA,YAAY,CAACH,IAAD,EAAsC;AACtD;AAAA;AAAA,kDAAgBO,KAAhB,CAAsBP,IAAtB;AACH;;AAEMQ,QAAAA,YAAY,CAACR,IAAD,EAAmC;AAElD,cAAIS,OAAO,GAAGT,IAAI,CAACS,OAAnB;AACA,cAAIC,GAAG,GAAGD,OAAO,CAACC,GAAlB;;AACA,cAAIC,OAAO,GAAG,KAAKC,wBAAL,CAA8BF,GAA9B,CAAd;;AAEA,kBAAQC,OAAR;AACI,iBAAM;AAAA;AAAA,gDAAcE,eAAd,CAA8BC,SAApC;AAEI,qBAAO,KAAKC,aAAL;AAAA;AAAA,sDAAoCC,GAApC,CAAwChB,IAAxC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAca,eAAd,CAA8BI,KAAnC;AAEI,qBAAO,KAAKF,aAAL;AAAA;AAAA,8CAAgCG,KAAhC,CAAsClB,IAAtC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAca,eAAd,CAA8BM,cAAnC;AAEI,qBAAO,KAAKJ,aAAL;AAAA;AAAA,sDAAoCK,IAApC,CAAyCpB,IAAzC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAca,eAAd,CAA8BQ,KAAnC;AACI;;AACJ,iBAAK;AAAA;AAAA,gDAAcR,eAAd,CAA8BS,MAAnC;AAEI,qBAAO,KAAKP,aAAL;AAAA;AAAA,gDAAiCQ,MAAjC,CAAwCvB,IAAxC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAca,eAAd,CAA8BW,IAAnC;AAEI,qBAAO,KAAKT,aAAL;AAAA;AAAA,4CAA+BU,IAA/B,CAAoChB,OAAO,CAACiB,MAAR,CAAe,CAAf,CAApC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAcb,eAAd,CAA8Bc,IAAnC;AAEI,qBAAO,KAAKZ,aAAL;AAAA;AAAA,4CAA+Ba,IAA/B,CAAoCnB,OAAO,CAACiB,MAAR,CAAe,CAAf,CAApC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAcb,eAAd,CAA8BgB,IAAnC;AAEI,qBAAO,KAAKd,aAAL;AAAA;AAAA,4CAA+Be,IAA/B,CAAoC9B,IAApC,CAAP;;AAEJ,iBAAK;AAAA;AAAA,gDAAca,eAAd,CAA8BkB,IAAnC;AAEI,qBAAO,KAAKhB,aAAL;AAAA;AAAA,4CAA+BiB,IAA/B,CAAoChC,IAApC,CAAP;AAjCR;AAmCH;;AAEOe,QAAAA,aAAa,CAA8BkB,IAA9B,EAAsD;AACvE,cAAIC,IAAI,GAAG,IAAID,IAAJ,EAAX,CADuE,CAEvE;;AACA,eAAK/C,eAAL,CAAqBiD,IAArB,CAA0BD,IAA1B;;AACA,iBAAOA,IAAP;AACH;;AAEME,QAAAA,UAAU,CAACpC,IAAD,EAAoD;AACjE,iBAAO,KAAKqC,OAAL,CAAarC,IAAI,CAACsC,GAAlB,CAAP;AACH;;AAEMD,QAAAA,OAAO,CAAiCE,GAAjC,EAAqE;AAC/E,cAAIC,IAAW,GAAGD,GAAG,CAAC,CAAD,CAArB;AACA,cAAIE,KAAY,GAAGF,GAAG,CAAC,CAAD,CAAtB;;AACA,cAAIG,GAAG,GAAG,KAAK1D,eAAL,CAAqB2D,mBAArB,CAAyC;AAAA;AAAA,8CAAcC,UAAd,CAAyBC,IAAlE;AAAA;AAAA,qCAAV;;AACA,cAAIL,IAAI,IAAI;AAAA;AAAA,8CAAcM,aAAd,CAA4BC,MAAxC,EAA+C;AAC3C,mBAAOL,GAAG,CAACM,eAAJ,CAAoBP,KAApB,CAAP;AACH,WAFD,MAEM,IAAID,IAAI,IAAI;AAAA;AAAA,8CAAcM,aAAd,CAA4BG,MAAxC,EAAgD;AAClD,mBAAOP,GAAG,CAACQ,eAAJ,CAAoBT,KAApB,CAAP;AACH;AACJ;;AAEMU,QAAAA,UAAU,CAACZ,GAAD,EAA0B;AACvC,cAAIC,IAAW,GAAGD,GAAG,CAAC,CAAD,CAArB;AACA,cAAIE,KAAY,GAAGF,GAAG,CAAC,CAAD,CAAtB;;AACA,cAAIG,GAAG,GAAG,KAAK1D,eAAL,CAAqB2D,mBAArB,CAAyC;AAAA;AAAA,8CAAcC,UAAd,CAAyBC,IAAlE;AAAA;AAAA,qCAAV;;AACA,cAAIO,GAAG,GAAGV,GAAG,CAACW,cAAJ,CAAmBb,IAAnB,EAAwBC,KAAxB,CAAV;;AACA,cAAIW,GAAJ,EAAQ;AACJ,mBAAOA,GAAP;AACH;AACJ;;AAEOxC,QAAAA,wBAAwB,CAAC0C,IAAD,EAAoB;AAChD,iBAAO;AAAA;AAAA,8CAAcC,qBAAd,CAAoCD,IAApC,CAAP;AACH;AAED;AACJ;AACA;;;AACWX,QAAAA,mBAAmB,CAAkCa,UAAlC,EAA6CC,SAA7C,EAAyD;AAC/E,iBAAO,KAAKzE,eAAL,CAAqB2D,mBAArB,CAAyCa,UAAzC,EAAoDC,SAApD,CAAP;AACH;;AAEMC,QAAAA,OAAO,GAAE;AACZlG,UAAAA,cAAc,CAACmG,eAAf;AACA;AAAA;AAAA,kDAAgBD,OAAhB;AACA;AAAA;AAAA,kDAAgBA,OAAhB;AACH;;AAEME,QAAAA,KAAK,GAAE;AACV,oCAAAlF,cAAc,GAAG,IAAjB;AACH;;AA/JwC,O","sourcesContent":["import { log, Node, Tween, Vec3 } from \"cc\";\nimport { Singleton } from \"../../../../framework/components/Singleton\";\nimport { HeroSpineNode, MonsterSpineNode, SpineNodeBase } from \"../../common/spine/SpineNodeBase\";\nimport { FightEvent } from \"../event/FightEvent\";\nimport { FightEventDataType } from \"../event/FightEventDataType\";\nimport { fightEventMgr } from \"../event/FightEventMgr\";\nimport { FightConstant } from \"../FightConstant\";\nimport { FightMainLayer } from \"../FightMainLayer\";\nimport { FightMainWorld } from \"../FightMainWorld\";\nimport { FightLayerBase } from \"../layer/FightLayerBase\";\nimport { RoleLayer } from \"../layer/RoleLayer\";\nimport { AcitonJump, ActionAddPrefab, ActionBase, ActionDelay, ActionGoBack, ActionMove, ActionSpineAnim } from \"./Action\";\nimport { ActionHide } from \"./ActionHide\";\nimport { ActionShow } from \"./ActionShow\";\nimport { attackActionMgr, AttackActionMgr } from \"./AttackActionMgr\";\nimport { resultActionMgr, ResultActionMgr } from \"./ResultActionMgr\";\n\n\nexport interface FightActionData {\n    own:HeroSpineNode | MonsterSpineNode\n    target:HeroSpineNode | MonsterSpineNode\n    result:any\n    animCfg:any\n}\n\nexport let fightActionMgr:FightActionMgr = null;\n/**\n * @description 行动管理器 \n * */\nexport class FightActionMgr extends Singleton{\n\n    private _fightMainLayer:FightMainLayer = null;\n\n    private _fightMainWorld:FightMainWorld = null;\n\n    private _tempActionList:ActionBase[] = null\n\n    public static init(mainLayer:FightMainLayer){\n        fightActionMgr = FightActionMgr.getInstance<FightActionMgr>();\n        fightActionMgr._init(mainLayer);\n    }\n\n    private _init(mainLayer:FightMainLayer) {\n        this._fightMainLayer = mainLayer;\n        this._fightMainWorld = this._fightMainLayer.getFightMainWorld();\n        this._tempActionList = new Array<ActionBase>();\n        AttackActionMgr.init();\n        ResultActionMgr.init();\n        this._initListeners();\n    }\n\n    private _initListeners() {\n        fightEventMgr.addEventListener(FightConstant.FightEvent.Attack_Start,this._onAttackStart.bind(this));\n        fightEventMgr.addEventListener(FightConstant.FightEvent.Attack_End,this._onAttackEnd.bind(this));\n        fightEventMgr.addEventListener(FightConstant.FightEvent.Result_Start,this._onResultStart.bind(this));\n        fightEventMgr.addEventListener(FightConstant.FightEvent.Result_End,this._onResultEnd.bind(this));\n    }\n\n    private _onAttackStart(event:FightEvent) {\n        if (!this._fightMainWorld){\n            this._fightMainWorld = this._fightMainLayer.getFightMainWorld();\n        }\n        let data:FightEventDataType.Action_Data = event.getEventData();\n        this._parseAttack(data);\n    }\n\n    \n    private _onAttackEnd(event:FightEvent) {\n        \n    }\n\n    private _onResultStart(event:FightEvent) {\n        let data:FightEventDataType.Action_Data = event.getEventData();\n        this._parseResult(data);\n    }\n\n    private _onResultEnd(event:FightEvent) {\n        // 做些清理工作;\n        this._tempActionList.length = 0;\n        fightEventMgr.send(new FightEvent(FightConstant.FightEvent.Action_End,null));\n    }\n\n    private _parseAttack(data:FightEventDataType.Action_Data) {\n        attackActionMgr.parse(data);\n    }\n\n    /**\n     * \n     * @param data 播放结果\n     */\n    private _parseResult(data:FightEventDataType.Action_Data) {\n        resultActionMgr.parse(data);\n    } \n\n    public getAnimation(data:FightActionData):Tween<Node> {\n\n        let animCfg = data.animCfg;\n        let cmd = animCfg.cmd;\n        let cmdEnum = this._getUnitActionEnumByName(cmd);\n\n        switch (cmdEnum) {\n            case  FightConstant.FightUnitAction.AddPrefab:\n\n                return this.getUnitAction(ActionAddPrefab).add(data);\n\n            case FightConstant.FightUnitAction.Delay:\n                \n                return this.getUnitAction(ActionDelay).delay(data);\n        \n            case FightConstant.FightUnitAction.SpineAnimation:\n\n                return this.getUnitAction(ActionSpineAnim).play(data);\n\n            case FightConstant.FightUnitAction.Color:\n                return;\n            case FightConstant.FightUnitAction.GoBack:\n\n                return this.getUnitAction(ActionGoBack).goBack(data);\n\n            case FightConstant.FightUnitAction.Hide:\n                \n                return this.getUnitAction(ActionHide).hide(animCfg.params[0]);\n\n            case FightConstant.FightUnitAction.Show:\n                \n                return this.getUnitAction(ActionShow).show(animCfg.params[0]);\n\n            case FightConstant.FightUnitAction.Move:\n\n                return this.getUnitAction(ActionMove).move(data);\n\n            case FightConstant.FightUnitAction.Jump:\n\n                return this.getUnitAction(AcitonJump).jump(data);\n        }\n    }\n\n    private getUnitAction<T extends typeof ActionBase>(clas:T):InstanceType<T> {\n        let anim = new clas() as InstanceType<T>;\n        // wait fot delet\n        this._tempActionList.push(anim);\n        return anim\n    }\n\n    public getOwnUnit(data:FightEventDataType.Action_Data):HeroSpineNode {\n        return this.getUnit(data.Who);\n    }\n\n    public getUnit<T extends typeof SpineNodeBase>(who:[number,number]):InstanceType<T>{\n        let camp:number = who[0];\n        let index:number = who[1];\n        let com = this._fightMainWorld.getCommonentInLayer(FightConstant.FightLayer.ROLE,RoleLayer);\n        if (camp == FightConstant.FightUnitType.Attack){\n            return com.getRoleAttacker(index) as InstanceType<T>;\n        }else if (camp == FightConstant.FightUnitType.Defend) {\n            return com.getRoleDefender(index) as InstanceType<T>;\n        }\n    }\n\n    public getUnitPos(who:[number,number]):Vec3{\n        let camp:number = who[0];\n        let index:number = who[1];\n        let com = this._fightMainWorld.getCommonentInLayer(FightConstant.FightLayer.ROLE,RoleLayer);\n        let pos = com.getFomationPos(camp,index);\n        if (pos){\n            return pos;\n        }\n    }\n\n    private _getUnitActionEnumByName(name:string):number{\n        return FightConstant.FightUnitActionString[name]\n    }\n\n    /**\n     * name\n     */\n    public getCommonentInLayer<T extends typeof FightLayerBase>(layerIndex,layerCtor:T){\n        return this._fightMainWorld.getCommonentInLayer(layerIndex,layerCtor);\n    }\n\n    public destory(){\n        FightActionMgr.destoryInstance();\n        attackActionMgr.destory();\n        resultActionMgr.destory();\n    }\n\n    public clear(){\n        fightActionMgr = null;\n    }\n}"]}