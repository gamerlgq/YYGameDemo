{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/GameDemoReal/assets/scripts/framework/data/ResourcesLoader.ts"],"names":["ResourcesLoader","assetManager","error","game","resources","netLoadingMgr","preload","path","doneFunc","err","dataAsset","message","load","type","undefined","get","bundleName","bundle","getBundle","loadWithViewInfo","viewInfo","isShowLoading","Path","addMsgLoading","_autoReleaseRes","removeMsgLoading","loadList","pathList","onProcess","onComplete","loadDir","release","loadPromise","Promise","resolve","rejected","data","checkNeedToRelease","mb","_gfxDevice","memoryStatus","textureSize","_CacheMaxMemory","addResRef","layerName","asset","_ResCounter","addRef","decResRef","decRef","delete","clearAllRef","forEach","element","clear","releaseUnusedAssets","cache","Cache","View","set","Map"],"mappings":";;;mFAmBaA,e;;;;;;;;;;;;;;;;;;;AAnBGC,MAAAA,Y,OAAAA,Y;AAA4BC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;AAAWC,MAAAA,S,OAAAA,S;;AAGrDC,MAAAA,a,iBAAAA,a;;;;;;;iCAgBIL,e,GAAN,MAAMA,eAAN,CAAsB;AAIzB;AAGA;AACc,eAAPM,OAAO,CAACC,IAAD,EAA0BC,QAA1B,EAA8D;AACxEJ,UAAAA,SAAS,CAACE,OAAV,CAAkBC,IAAlB,EAAwB,CAACE,GAAD,EAAMC,SAAN,KAAoB;AACxC,gBAAID,GAAJ,EAAS;AACLP,cAAAA,KAAK,CAAC,gCAAD,EAAmCO,GAAG,CAACE,OAAvC,CAAL;AACH;;AACDH,YAAAA,QAAQ,CAACE,SAAD,CAAR;AACH,WALD;AAMH;AAED;AACJ;AACA;;;AACe,eAAJE,IAAI,CAACL,IAAD,EAAeC,QAAf,EAAmDK,IAAnD,EAAwE;AAC/E,cAAIA,IAAI,IAAIC,SAAZ,EAAuB;AACnBV,YAAAA,SAAS,CAACQ,IAAV,CAAeL,IAAf,EAAqB,CAACE,GAAD,EAAMC,SAAN,KAAoB;AACrC,kBAAID,GAAJ,EAAS;AACLP,gBAAAA,KAAK,CAAC,6BAAD,EAAgCO,GAAG,CAACE,OAApC,CAAL;AACH;;AACDH,cAAAA,QAAQ,CAACE,SAAD,EAAYD,GAAZ,CAAR;AACH,aALD;AAMA;AACH;;AAEDL,UAAAA,SAAS,CAACQ,IAAV,CAAeL,IAAf,EAAqBM,IAArB,EAA2B,CAACJ,GAAD,EAAMC,SAAN,KAAoB;AAC3C,gBAAID,GAAJ,EAAS;AACLP,cAAAA,KAAK,CAAC,6BAAD,EAAgCO,GAAG,CAACE,OAApC,CAAL;AACH;;AACDH,YAAAA,QAAQ,CAACE,SAAD,EAAYD,GAAZ,CAAR;AACH,WALD;AAMH;;AAES,eAAHM,GAAG,CAAkBR,IAAlB,EAAgCM,IAAhC,EAAwGG,UAAkB,GAAG,WAA7H,EAAoJ;AAC1J,cAAIC,MAAkC,GAAGhB,YAAY,CAACiB,SAAb,CAAuBF,UAAvB,CAAzC;AACA,iBAAOC,MAAM,CAAEF,GAAR,CAAYR,IAAZ,EAAkBM,IAAlB,CAAP;AACH;AAED;AACJ;AACA;;;AAC2B,eAAhBM,gBAAgB,CAACC,QAAD,EAAyBZ,QAAzB,EAA6Da,aAAsB,GAAG,IAAtF,EAA4FR,IAA5F,EAAiH;AACpI,cAAIN,IAAI,GAAGa,QAAQ,CAACE,IAApB;;AACA,cAAID,aAAJ,EAAmB;AACf;AAAA;AAAA,gDAAcE,aAAd,CAA4B,eAAehB,IAA3C,EAAiD,CAAjD;AACH;;AAED,cAAIM,IAAI,IAAIC,SAAZ,EAAuB;AACnBV,YAAAA,SAAS,CAACQ,IAAV,CAAeL,IAAf,EAAqB,CAACE,GAAD,EAAMC,SAAN,KAAoB;AACrC,kBAAID,GAAJ,EAAS;AACLP,gBAAAA,KAAK,CAAC,6BAAD,EAAgCO,GAAG,CAACE,OAApC,CAAL;AACH,eAHoC,CAKrC;;;AACAX,cAAAA,eAAe,CAACwB,eAAhB,CAAgCJ,QAAhC,EAA0CV,SAA1C;;AACAF,cAAAA,QAAQ,CAACE,SAAD,CAAR,CAPqC,CASrC;;AACA;AAAA;AAAA,kDAAce,gBAAd,CAA+B,eAAelB,IAA9C;AACH,aAXD;AAYA;AACH;;AAEDH,UAAAA,SAAS,CAACQ,IAAV,CAAeL,IAAf,EAAqBM,IAArB,EAA2B,CAACJ,GAAD,EAAMC,SAAN,KAAoB;AAC3C,gBAAID,GAAJ,EAAS;AACLP,cAAAA,KAAK,CAAC,6BAAD,EAAgCO,GAAG,CAACE,OAApC,CAAL;AACH,aAH0C,CAK3C;;;AACAX,YAAAA,eAAe,CAACwB,eAAhB,CAAgCJ,QAAhC,EAA0CV,SAA1C;;AACAF,YAAAA,QAAQ,CAACE,SAAD,CAAR,CAP2C,CAS3C;;AACA;AAAA;AAAA,gDAAce,gBAAd,CAA+B,eAAelB,IAA9C;AACH,WAXD;AAYH;;AAEc,eAARmB,QAAQ,CAACC,QAAD,EAAqBC,SAArB,EAA0EC,UAA1E,EAAkGb,UAAkB,GAAG,WAAvH,EAAoI;AAC/I,cAAIC,MAAM,GAAGhB,YAAY,CAACiB,SAAb,CAAuBF,UAAvB,CAAb;AACAC,UAAAA,MAAM,CAACL,IAAP,CAAYe,QAAZ,EAAqBC,SAArB,EAAgCC,UAAhC;AACH;;AAEa,eAAPC,OAAO,CAACvB,IAAD,EAAcqB,SAAd,EAAmEC,UAAnE,EAA2Fb,UAAkB,GAAG,WAAhH,EAA4H;AACtI,cAAIC,MAAM,GAAGhB,YAAY,CAACiB,SAAb,CAAuBF,UAAvB,CAAb;AACAC,UAAAA,MAAM,CAACa,OAAP,CAAevB,IAAf,EAAoBqB,SAApB,EAA+BC,UAA/B;AACH,SA3FwB,CA6FzB;;;AACc,eAAPE,OAAO,CAACxB,IAAD,EAAeS,UAAkB,GAAG,WAApC,EAAiD;AAC3D,cAAIC,MAAM,GAAGhB,YAAY,CAACiB,SAAb,CAAuBF,UAAvB,CAAb;AACAC,UAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEc,OAAR,CAAgBxB,IAAhB;AACH;;AAEiB,eAAXyB,WAAW,CAAkBzB,IAAlB,EAAgCM,IAAhC,EAAiE;AAC/E,iBAAO,IAAIoB,OAAJ,CAAe,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACzC,iBAAKvB,IAAL,CAAUL,IAAV,EAAiB6B,IAAD,IAAa;AACzBF,cAAAA,OAAO,CAACE,IAAD,CAAP;AACH,aAFD,EAEGvB,IAFH;AAGH,WAJM,CAAP;AAKH,SAzGwB,CA2GzB;;;AACyB,eAAlBwB,kBAAkB,GAAY;AACjC;AACA,cAAIC,EAAE,GAAG,OAAO,IAAhB;;AACA,cAAInC,IAAI,CAACoC,UAAL,CAAgBC,YAAhB,CAA6BC,WAA7B,GAA4CH,EAA5C,GAAkDtC,eAAe,CAAC0C,eAAtE,EAAuF;AACnF,mBAAO,IAAP;AACH;;AACD,iBAAO,KAAP;AACH,SAnHwB,CAqHzB;;;AACgB,eAATC,SAAS,CAACC,SAAD,EAAoB;AAChC,cAAIC,KAAK,GAAG7C,eAAe,CAAC8C,WAAhB,CAA4B/B,GAA5B,CAAgC6B,SAAhC,CAAZ;;AACA,cAAIC,KAAJ,EAAW;AACPA,YAAAA,KAAK,CAACE,MAAN;AACH;AACJ,SA3HwB,CA6HzB;AACA;;;AACgB,eAATC,SAAS,CAACJ,SAAD,EAAoB;AAChC,cAAIC,KAAK,GAAG7C,eAAe,CAAC8C,WAAhB,CAA4B/B,GAA5B,CAAgC6B,SAAhC,CAAZ;;AACA,cAAIC,KAAJ,EAAW;AACPA,YAAAA,KAAK,CAACI,MAAN,CAAa,KAAb;;AACAjD,YAAAA,eAAe,CAAC8C,WAAhB,CAA4BI,MAA5B,CAAmCN,SAAnC;AACH;AACJ,SArIwB,CAuIzB;;;AACkB,eAAXO,WAAW,GAAG;AACjBnD,UAAAA,eAAe,CAAC8C,WAAhB,CAA4BM,OAA5B,CAAoCC,OAAO,IAAI;AAC3CA,YAAAA,OAAO,CAACJ,MAAR,CAAe,KAAf;AACH,WAFD;;AAGAjD,UAAAA,eAAe,CAAC8C,WAAhB,CAA4BQ,KAA5B;AACH;;AAEyB,eAAnBC,mBAAmB,GAAG;AACzBnD,UAAAA,SAAS,CAACmD,mBAAV;AACH;;AAE6B,eAAf/B,eAAe,CAACJ,QAAD,EAAyByB,KAAzB,EAAuC;AACjE,cAAIW,KAAK,GAAGpC,QAAQ,CAACqC,KAArB;;AACA,cAAI,CAACD,KAAL,EAAY;AACR,gBAAI,CAACxD,eAAe,CAAC8C,WAAhB,CAA4B/B,GAA5B,CAAgCK,QAAQ,CAACsC,IAAzC,CAAL,EAAqD;AACjD1D,cAAAA,eAAe,CAAC8C,WAAhB,CAA4Ba,GAA5B,CAAgCvC,QAAQ,CAACsC,IAAzC,EAA+Cb,KAA/C;AACH;AACJ,WAJD,MAIO;AACH;AACAA,YAAAA,KAAK,CAACE,MAAN;AACH;AACJ;;AA7JwB,O;;sBAAhB/C,e,iBAEwC,IAAI4D,GAAJ,E;;sBAFxC5D,e,qBAKwB,I","sourcesContent":["import { Asset, assetManager, AssetManager, error, game, log, resources, __private } from \"cc\";\nimport { ViewInfoType } from \"../../app/define/ConfigType\";\nimport { sceneMgr } from \"../core/SceneMgr\";\nimport { netLoadingMgr } from \"../net/NetLoadingMgr\";\n\n/*\n * @Author: liuguoqing\n * @Date: 2022-03-03 09:14:09\n * @LastEditors: liuguoqing\n * @LastEditTime: 2022-03-05 12:58:44\n * @Description: file content\n */\n\ntype UnionAsset = Asset | AssetManager.RequestItem[]\n\ntype FileCallback<T extends UnionAsset> = {\n    (data: T, err?): void\n}\n\nexport class ResourcesLoader {\n\n    private static _ResCounter: Map<string, Asset> = new Map()\n\n    // 内存限制\n    private static _CacheMaxMemory = 1024;\n\n    // 下载资源\n    static preload(path: string | string[], doneFunc: FileCallback<UnionAsset>) {\n        resources.preload(path, (err, dataAsset) => {\n            if (err) {\n                error(\"ResourcesLoader preload error:\", err.message);\n            }\n            doneFunc(dataAsset);\n        });\n    }\n\n    /**\n     * @description resources需要动态加载的资源(使用此方法，需要手动管理资源释放)\n     */\n    static load(path: string, doneFunc: FileCallback<UnionAsset>, type?: typeof Asset) {\n        if (type == undefined) {\n            resources.load(path, (err, dataAsset) => {\n                if (err) {\n                    error(\"ResourcesLoader load error:\", err.message);\n                }\n                doneFunc(dataAsset, err);\n            });\n            return;\n        }\n\n        resources.load(path, type, (err, dataAsset) => {\n            if (err) {\n                error(\"ResourcesLoader load error:\", err.message);\n            }\n            doneFunc(dataAsset, err);\n        });\n    }\n\n    static get<T extends Asset>(path: string, type?: __private._cocos_core_asset_manager_shared__AssetType<T> | null, bundleName: string = \"resources\"): T | null {\n        var bundle: AssetManager.Bundle | null = assetManager.getBundle(bundleName);\n        return bundle!.get(path, type);\n    }\n\n    /**\n     * @description 创建界面一定使用此方法 resources需要动态加载的资源(使用此方法，引擎底层资源释放)\n     */\n    static loadWithViewInfo(viewInfo: ViewInfoType, doneFunc: FileCallback<UnionAsset>, isShowLoading: boolean = true, type?: typeof Asset) {\n        let path = viewInfo.Path;\n        if (isShowLoading) {\n            netLoadingMgr.addMsgLoading(\"load view:\" + path, 0)\n        }\n\n        if (type == undefined) {\n            resources.load(path, (err, dataAsset) => {\n                if (err) {\n                    error(\"ResourcesLoader load error:\", err.message);\n                }\n\n                // 添加自动释放\n                ResourcesLoader._autoReleaseRes(viewInfo, dataAsset);\n                doneFunc(dataAsset);\n\n                //加载转圈\n                netLoadingMgr.removeMsgLoading(\"load view:\" + path)\n            });\n            return;\n        }\n\n        resources.load(path, type, (err, dataAsset) => {\n            if (err) {\n                error(\"ResourcesLoader load error:\", err.message);\n            }\n\n            // 添加自动释放\n            ResourcesLoader._autoReleaseRes(viewInfo, dataAsset);\n            doneFunc(dataAsset);\n\n            //加载转圈\n            netLoadingMgr.removeMsgLoading(\"load view:\" + path)\n        });\n    }\n\n    static loadList(pathList: string[], onProcess: (finishNum: number, max: number) => void, onComplete: () => void, bundleName: string = \"resources\") {\n        var bundle = assetManager.getBundle(bundleName);\n        bundle.load(pathList,onProcess, onComplete)\n    }\n\n    static loadDir(path: string,onProcess: (finishNum: number, max: number) => void, onComplete: () => void, bundleName: string = \"resources\"){\n        var bundle = assetManager.getBundle(bundleName);\n        bundle.loadDir(path,onProcess, onComplete)\n    }\n\n    //释放单个资源\n    static release(path: string, bundleName: string = \"resources\") {\n        var bundle = assetManager.getBundle(bundleName);\n        bundle?.release(path);\n    }\n\n    static loadPromise<T extends Asset>(path: string, type?: typeof Asset): Promise<T> {\n        return new Promise<T>((resolve, rejected) => {\n            this.load(path, (data: T) => {\n                resolve(data);\n            }, type)\n        })\n    }\n\n    //是否需要释放内存\n    static checkNeedToRelease(): boolean {\n        //暂时用了1GB内存需要释放\n        let mb = 1024 * 1024;\n        if (game._gfxDevice.memoryStatus.textureSize / (mb) > ResourcesLoader._CacheMaxMemory) {\n            return true\n        }\n        return false\n    }\n\n    // 引用计数+1\n    static addResRef(layerName: string) {\n        let asset = ResourcesLoader._ResCounter.get(layerName);\n        if (asset) {\n            asset.addRef();\n        }\n    }\n\n    // 引用计数-1\n    //单纯减少引用，纹理统一释放\n    static decResRef(layerName: string) {\n        let asset = ResourcesLoader._ResCounter.get(layerName);\n        if (asset) {\n            asset.decRef(false);\n            ResourcesLoader._ResCounter.delete(layerName);\n        }\n    }\n\n    //所有引用清除\n    static clearAllRef() {\n        ResourcesLoader._ResCounter.forEach(element => {\n            element.decRef(false)\n        });\n        ResourcesLoader._ResCounter.clear()\n    }\n\n    static releaseUnusedAssets() {\n        resources.releaseUnusedAssets()\n    }\n\n    private static _autoReleaseRes(viewInfo: ViewInfoType, asset: Asset) {\n        let cache = viewInfo.Cache;\n        if (!cache) {\n            if (!ResourcesLoader._ResCounter.get(viewInfo.View)) {\n                ResourcesLoader._ResCounter.set(viewInfo.View, asset);\n            }\n        } else {\n            // 永久缓存 >1 即可\n            asset.addRef();\n        }\n    }\n}"]}