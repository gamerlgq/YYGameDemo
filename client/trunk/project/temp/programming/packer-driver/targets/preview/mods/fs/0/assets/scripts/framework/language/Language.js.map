{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/GameDemoReal/assets/scripts/framework/language/Language.ts"],"names":["LanguageManager","Logger","EN","ZH","LANGUAGE_ZH","LANGUAGE_EN","supportLanguages","_support","getCodeLangFile","current","getStringByIDStr","idStr","codeLang","keys","split","out","index","length","element","e","_curLanguage","languages","isExist","lang","indexOf","languageManager"],"mappings":";;;8CAWaA,e;;;;;;;;;;;;;;;;;;;;;;;;AAPNC,MAAAA,M;;AACEC,MAAAA,E,iBAAAA,E;;AACAC,MAAAA,E,iBAAAA,E;;;;;;;AAEHC,MAAAA,W,GAAc,I;AACdC,MAAAA,W,GAAc,I;;iCAEPL,e,GAAN,MAAMA,eAAN,CAAsB;AAAA;AAAA,4CACS,CAAC,IAAD,EAAO,IAAP,CADT;;AAAA,gDAEKI,WAFL;AAAA;;AAGzB;AAC2B,YAAhBE,gBAAgB,CAACA,gBAAD,EAAkC;AACzD,eAAKC,QAAL,GAAgBD,gBAAhB;AACH;;AAGDE,QAAAA,eAAe,GAAG;AACd,cAAI,KAAKC,OAAL,IAAgBL,WAApB,EAAiC;AAC7B;AAAA;AAAA;AACH,WAFD,MAGK,IAAI,KAAKK,OAAL,IAAgBJ,WAApB,EAAiC;AAClC;AAAA;AAAA;AACH;AACJ;;AAEDK,QAAAA,gBAAgB,CAACC,KAAD,EAAsB;AAClC,cAAIC,QAAQ,GAAG,KAAKJ,eAAL,EAAf;AACA,cAAIK,IAAI,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAX;AAEA,cAAIC,GAAJ;;AACA,eAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,IAAI,CAACI,MAAjC,EAAyCD,KAAK,EAA9C,EAAkD;AAC9C,gBAAME,OAAO,GAAGL,IAAI,CAACG,KAAD,CAApB;;AAEA,gBAAID,GAAJ,EAAS;AACLA,cAAAA,GAAG,GAAGA,GAAG,CAACG,OAAD,CAAT;AACH,aAFD,MAGK;AACDH,cAAAA,GAAG,GAAGH,QAAQ,CAACM,OAAD,CAAd;AACH;AACJ;;AAED,cAAI,OAAOH,GAAP,IAAe,QAAnB,EAA6B;AACzB;AAAA;AAAA,kCAAOI,CAAP,CAAS,qCAAqCN,IAA9C;AACH;;AACD,iBAAOE,GAAP;AACH;AAED;AACJ;AACA;;;AACsB,YAAPN,OAAO,GAAW;AACzB,iBAAO,KAAKW,YAAZ;AACH;AAED;AACJ;AACA;;;AACwB,YAATC,SAAS,GAAa;AAC7B,iBAAO,KAAKd,QAAZ;AACH;;AAEMe,QAAAA,OAAO,CAACC,IAAD,EAAwB;AAClC,iBAAO,KAAKF,SAAL,CAAeG,OAAf,CAAuBD,IAAvB,IAA+B,CAAC,CAAvC;AACH,SAxDwB,CA2DzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAlJyB,O;;iCAqJlBE,e,GAAkB,IAAIzB,eAAJ,E","sourcesContent":["import { error, find, log, resources, warn } from \"cc\";\r\nimport { Protocol } from \"../../app/define/Protocol\";\r\nimport { gameMgr } from \"../core/GameMgr\";\r\nimport { socketMgr } from \"../net/SocketMgr\";\r\nimport Logger from \"../utils/Logger\";\r\nimport { EN } from \"./code/en\";\r\nimport { ZH } from \"./code/zh\";\r\n\r\nconst LANGUAGE_ZH = \"zh\";\r\nconst LANGUAGE_EN = \"en\";\r\n\r\nexport class LanguageManager {\r\n    private _support: Array<string> = [\"zh\", \"en\"];        // 支持的语言\r\n    private _curLanguage:string = LANGUAGE_ZH\r\n    /** 设置多语言系统支持哪些语种 */\r\n    public set supportLanguages(supportLanguages: Array<string>) {\r\n        this._support = supportLanguages;\r\n    }\r\n\r\n    \r\n    getCodeLangFile() {\r\n        if (this.current == LANGUAGE_ZH) {\r\n            return ZH\r\n        }\r\n        else if (this.current == LANGUAGE_EN) {\r\n            return EN\r\n        }\r\n    }\r\n\r\n    getStringByIDStr(idStr:string):string {\r\n        let codeLang = this.getCodeLangFile()\r\n        let keys = idStr.split(\".\")\r\n\r\n        let out\r\n        for (let index = 0; index < keys.length; index++) {\r\n            const element = keys[index];\r\n\r\n            if (out) {\r\n                out = out[element]\r\n            }\r\n            else {\r\n                out = codeLang[element]\r\n            }\r\n        }\r\n\r\n        if (typeof(out) != \"string\") {\r\n            Logger.e(\"getStringByIDStr() - error type:\" + keys)\r\n        }\r\n        return out\r\n    }\r\n\r\n    /**\r\n     * 获取当前语种\r\n     */\r\n    public get current(): string {\r\n        return this._curLanguage\r\n    }\r\n\r\n    /**\r\n     * 获取支持的多语种数组\r\n     */\r\n    public get languages(): string[] {\r\n        return this._support;\r\n    }\r\n\r\n    public isExist(lang: string): boolean {\r\n        return this.languages.indexOf(lang) > -1;\r\n    }\r\n\r\n    \r\n    // /**\r\n    //  * 改变语种，会自动下载对应的语种，下载完成回调\r\n    //  * @param language \r\n    //  */\r\n    // public setLanguage(language: string, callback: (success: boolean) => void) {\r\n    //     if (!language) {\r\n    //         language = DEFAULT_LANGUAGE;\r\n    //     }\r\n    //     language = language.toLowerCase();\r\n    //     let index = this.languages.indexOf(language);\r\n    //     if (index < 0) {\r\n    //         warn(\"当前不支持该语种\" + language + \" 将自动切换到 zh 语种!\");\r\n    //         language = DEFAULT_LANGUAGE;\r\n    //     }\r\n    //     if (language === LanguageData.current) {\r\n    //         callback(false);\r\n    //         return;\r\n    //     }\r\n\r\n    //     this.loadLanguageAssets(language, (err: any, lang: string) => {\r\n    //         if (err) {\r\n    //             error(\"语言资源包下载失败\", err);\r\n    //             callback(false);\r\n    //             return;\r\n    //         }\r\n\r\n    //         Logger.i(`当前语言为【${language}】`);\r\n    //         LanguageData.current = language;\r\n    //         // this._languagePack.updateLanguage(language);\r\n\r\n    //         socketMgr.sendInnerMsg(Protocol.Inner.LanguageChange, language)\r\n    //         // if (Editor.EditMode) {\r\n    //         //     find(\"Canvas\").getComponentsInChildren(langua)\r\n    //         // }\r\n    //         // else {\r\n    //         // }\r\n    //         callback(true);\r\n    //     });\r\n    // }\r\n\r\n    // /**\r\n    //  * 设置多语言资源目录\r\n    //  * @param langjsonPath 多语言json目录\r\n    //  * @param langTexturePath 多语言图片目录\r\n    //  */\r\n    // public setAssetsPath(langjsonPath: string, langTexturePath: string) {\r\n    //     this._languagePack.setAssetsPath(langjsonPath, langTexturePath);\r\n    // }\r\n\r\n    // /**\r\n    //  * 根据data获取对应语种的字符\r\n    //  * @param labId \r\n    //  * @param arr \r\n    //  */\r\n    // public getLangByID(labId: string): string {\r\n    //     let yy = {};\r\n    //     let keys = labId.split(\".\");\r\n    //     keys.forEach(key => {\r\n    //         yy[key];\r\n    //     });\r\n\r\n    //     if (!this._isInit) {\r\n    //         this._isInit = true\r\n    //         this.setLanguage(DEFAULT_LANGUAGE,()=>{})\r\n    //     }\r\n    //     return LanguageData.getLangByID(labId);\r\n    // }\r\n\r\n    // /**\r\n    //  * 下载语言包素材资源\r\n    //  * 包括语言json配置和语言纹理包\r\n    //  * @param lang \r\n    //  * @param callback \r\n    //  */\r\n    // public loadLanguageAssets(lang: string, callback: Function) {\r\n    //     lang = lang.toLowerCase();\r\n    //     return this._languagePack.loadLanguageAssets(lang, callback);\r\n    // }\r\n\r\n    // /**\r\n    //  * 释放不需要的语言包资源\r\n    //  * @param lang \r\n    //  */\r\n    // public releaseLanguageAssets(lang: string) {\r\n    //     lang = lang.toLowerCase();\r\n    //     this._languagePack.releaseLanguageAssets(lang);\r\n    //     socketMgr.sendInnerMsg(Protocol.Inner.LanguageRelease, lang)\r\n    // }\r\n}\r\n\r\nexport let languageManager = new LanguageManager;"]}