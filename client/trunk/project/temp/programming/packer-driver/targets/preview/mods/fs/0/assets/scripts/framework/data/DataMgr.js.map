{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/data/DataMgr.ts"],"names":["DataMgr","error","log","Singleton","DataBase","constructor","_dataMap","Map","registerDataFile","dataHandlerName","path","parser","data","set","loadData","pair","done","start","ended","_loadDataWithIndex","_loadDataWithDataHandlerName","getData","namekey","key","toString","_getDataCache","delData","showAll","has","get","index","loadDataWithNameKey","clear","dataMgr","getInstance"],"mappings":";;;+DAYMA,O;;;;;;;;;;;;;;;;;;;;;;;;;AALGC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,G,OAAAA,G;;AACPC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,Q,iBAAAA,Q;;;;;;;AAGHJ,MAAAA,O,GAAN,MAAMA,OAAN;AAAA;AAAA,kCAAgC;AAG5BK,QAAAA,WAAW,GAAG;AACV;;AADU;;AAEV,eAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACH;;AAEDC,QAAAA,gBAAgB,CAACC,eAAD,EAA0BC,IAA1B,EAAwCC,MAAxC,EAA4E;AACxF,cAAIC,IAAI,GAAG;AAAA;AAAA,oCAAaH,eAAb,EAA8BC,IAA9B,EAAoCC,MAApC,CAAX;;AACA,eAAKL,QAAL,CAAcO,GAAd,CAAkBJ,eAAlB,EAAmCG,IAAnC;AACH;;AAEDE,QAAAA,QAAQ,CAA8CL,eAA9C,EAAgEM,IAAhE,EAA0EC,IAA1E,EAA6F;AACjG,cAAIC,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAhB;AACA,cAAIG,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAhB;;AACA,cAAIE,KAAK,IAAIC,KAAb,EAAoB;AAChB,iBAAKC,kBAAL,CAAwBV,eAAxB,EAAwCM,IAAxC,EAA6CC,IAA7C;AACH,WAFD,MAEK;AACD,iBAAKI,4BAAL,CAAkCX,eAAlC,EAAkDO,IAAlD;AACH;AACJ;;AAEDK,QAAAA,OAAO,CAACZ,eAAD,EAAyBa,OAAzB,EAAyD;AAC5D,cAAIC,GAAG,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,QAAT,OAAuB,EAAjC;;AACA,cAAIZ,IAAI,GAAG,KAAKa,aAAL,CAAmBhB,eAAnB,CAAX;;AACA,cAAIG,IAAJ,EAAS;AACL,mBAAOA,IAAI,CAACS,OAAL,CAAaE,GAAb,CAAP;AACH,WAFD,MAEO;AACHtB,YAAAA,KAAK,CAAC,0DAAD,EAA6DQ,eAA7D,EAA8Ec,GAA9E,CAAL;AACH;AACJ;;AAEDG,QAAAA,OAAO,CAACjB,eAAD,EAA0Ba,OAA1B,EAA2D;AAC9D,cAAIC,GAAG,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,QAAT,OAAuB,EAAjC;;AACA,cAAIZ,IAAI,GAAG,KAAKa,aAAL,CAAmBhB,eAAnB,CAAX;;AACA,cAAIG,IAAJ,EAAS;AACL,mBAAOA,IAAI,CAACc,OAAL,CAAaH,GAAb,CAAP;AACH,WAFD,MAEO;AACHtB,YAAAA,KAAK,CAAC,0DAAD,EAA6DQ,eAA7D,EAA8Ec,GAA9E,CAAL;AACH;AACJ;;AAEDI,QAAAA,OAAO,GAAG;AACNzB,UAAAA,GAAG,CAAC,KAAKI,QAAN,CAAH;AACH;;AAEOmB,QAAAA,aAAa,CAAChB,eAAD,EAAyC;AAC1D,cAAI,CAAC,KAAKH,QAAL,CAAcsB,GAAd,CAAkBnB,eAAlB,CAAL,EAAyC;AACrCR,YAAAA,KAAK,CAAC,mCAAD,EAAsCQ,eAAtC,CAAL;AACA,mBAAO,IAAP;AACH;;AAED,cAAIG,IAAI,GAAG,KAAKN,QAAL,CAAcuB,GAAd,CAAkBpB,eAAlB,CAAX;;AACA,iBAAOG,IAAP;AACH;;AAEOO,QAAAA,kBAAkB,CAA8CV,eAA9C,EAAgEM,IAAhE,EAA0EC,IAA1E,EAA6F;AACnH,cAAIJ,IAAI,GAAG,KAAKa,aAAL,CAAmBhB,eAAnB,CAAX;;AACA,cAAIG,IAAJ,EAAS;AACL,gBAAIK,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAhB;AACA,gBAAIG,KAAK,GAAGH,IAAI,CAAC,CAAD,CAAhB;;AACA,iBAAK,IAAIe,KAAK,GAAGb,KAAjB,EAAwBa,KAAK,IAAIZ,KAAjC,EAAwCY,KAAK,EAA7C,EAAiD;AAC7C,kBAAIA,KAAK,IAAIZ,KAAb,EAAoB;AAChBN,gBAAAA,IAAI,CAACmB,mBAAL,CAAyBD,KAAK,CAACN,QAAN,EAAzB,EAA0CR,IAA1C;AACH,eAFD,MAEK;AACDJ,gBAAAA,IAAI,CAACmB,mBAAL,CAAyBD,KAAK,CAACN,QAAN,EAAzB;AACH;AACJ;AACJ;AACJ;;AAEOJ,QAAAA,4BAA4B,CAACX,eAAD,EAAwBO,IAAxB,EAA2C;AAC3E,cAAIJ,IAAI,GAAG,KAAKa,aAAL,CAAmBhB,eAAnB,CAAX;;AACA,cAAIG,IAAJ,EAAS;AACLA,YAAAA,IAAI,CAACmB,mBAAL,CAAyB,EAAzB,EAA4Bf,IAA5B;AACH;AACJ;;AAEDgB,QAAAA,KAAK,GAAG;AACJ,6BAAAC,OAAO,GAAG,IAAV;AACH;;AAjF2B,O,EAoFhC;;yBACWA,O,GAAU,CAAC,MAAI;AACtB,eAAOjC,OAAO,CAACkC,WAAR,EAAP;AACH,OAFoB,G","sourcesContent":["/*\n * @Author: liuguoqing\n * @Date: 2022-03-04 23:09:26\n * @LastEditors: liuguoqing\n * @LastEditTime: 2022-03-06 15:21:23\n * @Description: file content\n */\nimport { error, log } from \"cc\";\nimport { Singleton } from \"../components/Singleton\";\nimport { DataBase, DataCallback } from \"./DataBase\";\nimport { DataParserBase } from \"./DataParserBase\";\n\nclass DataMgr extends Singleton {\n    private _dataMap: Map<string, DataBase>;\n\n    constructor() {\n        super();\n        this._dataMap = new Map();\n    }\n\n    registerDataFile(dataHandlerName: string, path: string, parser: DataParserBase| null): void {\n        let data = new DataBase(dataHandlerName, path, parser);\n        this._dataMap.set(dataHandlerName, data);\n    }\n\n    loadData<S extends string,PAIR extends Array<number>>(dataHandlerName:S,pair:PAIR,done?:DataCallback){\n        let start = pair[0];\n        let ended = pair[1];\n        if (start && ended) {\n            this._loadDataWithIndex(dataHandlerName,pair,done);\n        }else{\n            this._loadDataWithDataHandlerName(dataHandlerName,done);\n        }\n    }\n\n    getData(dataHandlerName:string, namekey?: string | number): any {\n        let key = namekey?.toString() || \"\" ;\n        let data = this._getDataCache(dataHandlerName);\n        if (data){\n            return data.getData(key);\n        } else {\n            error(\"Calling getData() fail! Data can't Find ! [ %s ] [ %s ] \", dataHandlerName, key);\n        }\n    }\n\n    delData(dataHandlerName: string, namekey?: string | number): void {\n        let key = namekey?.toString() || \"\";\n        let data = this._getDataCache(dataHandlerName);\n        if (data){\n            return data.delData(key);\n        } else {\n            error(\"Calling delData() fail! Data can't Find ! [ %s ] [ %s ] \", dataHandlerName, key);\n        }\n    }\n\n    showAll() {\n        log(this._dataMap);\n    }\n\n    private _getDataCache(dataHandlerName:string):DataBase | null {\n        if (!this._dataMap.has(dataHandlerName)) {\n            error(\"Data does not be registered[ %s ]\", dataHandlerName);\n            return null\n        }\n\n        let data = this._dataMap.get(dataHandlerName);\n        return data;\n    }\n\n    private _loadDataWithIndex<S extends string,PAIR extends Array<number>>(dataHandlerName:S,pair:PAIR,done?:DataCallback){\n        let data = this._getDataCache(dataHandlerName);\n        if (data){\n            let start = pair[0];\n            let ended = pair[1];\n            for (let index = start; index <= ended; index++) {\n                if (index == ended) {\n                    data.loadDataWithNameKey(index.toString(),done);\n                }else{\n                    data.loadDataWithNameKey(index.toString());\n                }\n            }\n        }\n    }\n\n    private _loadDataWithDataHandlerName(dataHandlerName:string,done?:DataCallback){\n        let data = this._getDataCache(dataHandlerName);\n        if (data){\n            data.loadDataWithNameKey(\"\",done);\n        }\n    }\n\n    clear() {\n        dataMgr = null;\n    }\n}\n\n// ()();\nexport let dataMgr = (()=>{\n    return DataMgr.getInstance<DataMgr>();\n})();"]}