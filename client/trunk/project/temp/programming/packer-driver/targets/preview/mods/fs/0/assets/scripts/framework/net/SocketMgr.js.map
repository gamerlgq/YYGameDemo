{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/net/SocketMgr.ts"],"names":["SocketMgr","log","Singleton","gameMgr","Message","Logger","BufferParser","netLoadingMgr","netStateMgr","BUFF_SIZE","constructor","socketParams","StateChangeCallback","_listenOnSocketState","bind","registerCallbackHandler","connect","ip","port","openFunc","errorFunc","_ip","_port","url","ws","WebSocket","binaryType","_ws","onopen","event","_onopen","onmessage","_onmessage","onerror","_onerror","onclose","_onclose","error","reConnect","close","send","msgId","bufferParser","sendParams","arrbuffSend","generateMsgArrayBuffer","net","sendInnerMsg","data","msg","addInnerMessage","params","_StateChangeCallback","onSocketChange","dataParse","generateParseData","addNetMessage","removeMsgLoading","clear","socketMgr","getInstance"],"mappings":"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","sourcesContent":["import { log, sys } from \"cc\";\nimport { Proto } from \"../../app/define/proto_mate\";\nimport { Singleton } from \"../components/Singleton\";\nimport { gameMgr } from \"../core/GameMgr\";\nimport { Message } from \"../listener/Message\";\nimport { decodeUtf8, encodeUtf8, str2ab } from \"../utils/functions\";\nimport Logger from \"../utils/Logger\";\nimport BufferParser from \"./BufferParser\";\nimport { netLoadingMgr } from \"./NetLoadingMgr\";\nimport { netStateMgr } from \"./NetStateMgr\";\n\n/*\n * @Author: liuguoqing\n * @Date: 2022-03-02 17:01:02\n * @LastEditors: liuguoqing\n * @LastEditTime: 2022-03-19 13:16:31\n * @Description: file content\n */\n\nexport type SocketCallback = {\n    (event: any): void\n}\n\nconst BUFF_SIZE = 1024 * 2;\nclass SocketMgr extends Singleton {\n    private _ws: WebSocket;\n    private _StateChangeCallback: SocketCallback;\n    private _ip: string;\n    private _port: string;\n\n    private constructor() {\n        super();\n        // net state change callback\n        let socketParams = {\n            StateChangeCallback: this._listenOnSocketState.bind(this),\n        };\n        this.registerCallbackHandler(socketParams);\n\n    }\n\n    connect(ip: string, port: string, openFunc: SocketCallback, errorFunc: SocketCallback) {\n        this._ip = ip;\n        this._port = port;\n        try {\n            let url = `ws://${ip}:${port}`;\n            let ws = new WebSocket(url);\n            ws.binaryType = \"arraybuffer\" //字节流\n            this._ws = ws;\n            ws.onopen = (event) => {\n                this._onopen(event);\n                openFunc(event);\n            };\n            ws.onmessage = (event) => {\n                this._onmessage(event);\n            };\n            ws.onerror = (event) => {\n                this._onerror(event);\n                errorFunc(event);\n            };\n            ws.onclose = (event) => {\n                this._onclose(event);\n                errorFunc(event);\n            };\n        } catch (error) {\n            log(\"connect error: \", error);\n        }\n    }\n\n    reConnect() {\n        if (this._ip && this._port) {\n            this.connect(\n                this._ip,\n                this._port,\n                (event) => { },\n                (event) => { log(event); }\n            );\n        }\n    }\n\n    close() {\n        if (this._ws) {\n            this._ws.close(4888);\n            this._ws = null;\n        }\n    }\n\n    // send(msgId: number, data: Object = {}) {\n    //     data[\"proto\"] = msgId;\n    //     data = JSON.stringify(data);\n    //     log(\"[WS] Send:\", msgId, data);\n    //     this._ws.send(<string>data);\n\n    //     netLoadingMgr.addMsgLoading(msgId)\n    // }\n\n    send(msgId: number, ...sendParams: any[]) {\n       \n        let bufferParser = new BufferParser\n        let arrbuffSend = bufferParser.generateMsgArrayBuffer(msgId, sendParams)\n        if (!arrbuffSend) {\n            return\n        }\n\n        this._ws.send(arrbuffSend);\n        Logger.net(\"====>msg:\" + msgId + \" [\" + sendParams + \"]\")\n    }\n\n\n    sendInnerMsg(msgId: number, data: Object = {}) {\n        let msg = new Message(msgId, data);\n        log(\"[WS] Send Inner:\", msgId, data);\n        gameMgr.addInnerMessage(msg);\n    }\n\n    registerCallbackHandler(params) {\n        this._StateChangeCallback = params.StateChangeCallback;\n    }\n\n    /**\n     * 监听Socket 状态变化\n     */\n    private _listenOnSocketState(event) {\n        netStateMgr.onSocketChange(event);\n    }\n\n    private _onopen(event) {\n        log(\"Send Text WS was opened.\");\n        log(event);\n        if (this._StateChangeCallback) {\n            this._StateChangeCallback(event);\n        }\n    }\n\n    // 接收消息\n    private _onmessage(event: any) {\n        let data = event.data;\n        if (data == null) {\n            log(event);\n            return;\n        }\n\n        let bufferParser = new BufferParser()\n        let dataParse = bufferParser.generateParseData(data)\n        let msg = new Message(bufferParser.msgId, dataParse);\n        gameMgr.addNetMessage(msg);\n\n        netLoadingMgr.removeMsgLoading(msg.msgId)\n        Logger.net(\"<==== msgId:\" + bufferParser.msgId + '['+dataParse+']')\n    }\n\n    private _onerror(event) {\n        log(\"Send Text fired an error\");\n        if (this._StateChangeCallback) {\n            this._StateChangeCallback(event);\n        }\n    }\n\n    private _onclose(event) {\n        log(event);\n        log(\"WebSocket instance closed.\");\n        if (this._StateChangeCallback) {\n            this._StateChangeCallback(event);\n        }\n    }\n\n    clear() {\n        socketMgr = null;\n    }\n}\n\n// ()();\nexport let socketMgr = (() => {\n    return SocketMgr.getInstance<SocketMgr>();\n})();"]}