{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/app/views/fight/layer/RoleLayer.ts"],"names":["RoleLayer","error","js","v3","yy","RoleSpineFactory","HeroSpineNode","MonsterSpineNode","FightData","fightDataMgr","fightEventMgr","FightConstant","FightLayerBase","FomationLayer","Array","init","_addListeners","_loadRoles","addEventListener","FightEvent","Blood_Change","_onBloodChange","bind","event","data","getEventData","fightActionData","Data","tar","target","camp","idx","formationIndex","result","cur","max","role","getRole","updateBlood","rp","getFightData","attackers","getAttackFormationDatas","_loadAttackers","defenders","getDefendFormationDatas","_loadDefenders","index","length","attackInfo","heroId","getHeroId","formatStr","node","create","addChild","_setPosition","FightUnitType","Attack","_attackRoleList","push","addBloodUI","setSiblingIndex","defenderInfo","Defend","_defendRoleList","setScale","changeSkin","pos","getFomationPos","position","startGame","forEach","element","play","macro","HeroAnimate","Idle","changeEquip","updateView","getRoleAttacker","getRoleDefender","isAttacker","com","_mainWorld","getCommonentInLayer","FightLayer","FORMATION","getAttackPosByIndex","getDefendPosByIndex","clone"],"mappings":"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","sourcesContent":["/*\n * @Author: liuguoqing\n * @Date: 2022-03-19 11:17:19\n * @LastEditors: liuguoqing\n * @LastEditTime: 2022-03-20 16:14:40\n * @Description: file content\n */\nimport { error, js, log, v3, Vec3 } from \"cc\";\nimport { yy } from \"../../../define/YYNamespace\";\nimport { RoleSpineFactory } from \"../../common/spine/RoleSpineFactory\";\nimport { HeroSpineNode, MonsterSpineNode } from \"../../common/spine/SpineNodeBase\";\nimport { FightActionData } from \"../action/FightActionMgr\";\nimport { FightData, FightFormationData } from \"../data/FightData\";\nimport { fightDataMgr } from \"../data/FightDataMgr\";\nimport { FightEvent } from \"../event/FightEvent\";\nimport { FightEventDataType } from \"../event/FightEventDataType\";\nimport { fightEventMgr } from \"../event/FightEventMgr\";\nimport { FightConstant } from \"../FightConstant\";\nimport { FightLayerBase } from \"./FightLayerBase\";\nimport { FomationLayer } from \"./FomationLayer\";\n\nexport class RoleLayer extends FightLayerBase {\n  \n    private _attackRoleList:Array<HeroSpineNode> = new Array<HeroSpineNode>();\n    private _defendRoleList:Array<MonsterSpineNode> = new Array<MonsterSpineNode>();\n\n    public init() {\n        this._addListeners();\n        this._loadRoles();\n    }\n\n    private _addListeners() {\n        fightEventMgr.addEventListener(FightConstant.FightEvent.Blood_Change,this._onBloodChange.bind(this));\n    }\n\n    private _onBloodChange(event:FightEvent) {\n        const data:FightEventDataType.Blood_Change = event.getEventData();\n        const fightActionData:FightActionData = data.Data;\n        const tar = fightActionData.target;\n        const camp = tar.camp;\n        const idx = tar.formationIndex;\n        const result = fightActionData.result;\n        let cur = result[2];\n        let max = result[3]\n        const role = this.getRole(camp,idx);\n        if (role){\n            role.updateBlood(cur,max)\n        }\n    }\n\n    private _loadRoles() {\n        let rp = fightDataMgr.getFightData(FightData);\n        let attackers = rp.getAttackFormationDatas();\n        this._loadAttackers(attackers);\n        let defenders = rp.getDefendFormationDatas();\n        this._loadDefenders(defenders);\n    }\n\n    private async _loadAttackers(attackers:Array<FightFormationData>) {\n        for (let index = 0; index < attackers.length; index++) {\n            let attackInfo = attackers[index];\n            let heroId = attackInfo.getHeroId();\n            if (heroId == -1){\n                return error(js.formatStr(\"RoleLayer:_loadAttackers heroId = -1 index:[%d]\",index));\n            }\n      \n            let node = await RoleSpineFactory.create(HeroSpineNode,heroId);\n            this.node.addChild(node);\n            this._setPosition(node,index,FightConstant.FightUnitType.Attack);\n            this._attackRoleList.push(node);\n            node.addBloodUI();\n            node.setSiblingIndex(-1);\n            node.formationIndex = index;\n            node.camp = FightConstant.FightUnitType.Attack;\n        }\n    }\n\n    private async _loadDefenders(defenders:Array<FightFormationData>){\n        for (let index = 0; index < defenders.length; index++) {\n            let defenderInfo = defenders[index];\n            let heroId = defenderInfo.getHeroId();\n            if (heroId == -1){\n                return error(js.formatStr(\"RoleLayer:_loadDefenders heroId = -1 index:[%d]\",index));\n            }\n\n            let node = await RoleSpineFactory.create(MonsterSpineNode,heroId);\n            this.node.addChild(node);\n            this._setPosition(node,index,FightConstant.FightUnitType.Defend);\n            this._defendRoleList.push(node);\n            node.setScale(v3(-1,1,1));\n            node.changeSkin(\"2\");\n            node.addBloodUI();\n            node.setSiblingIndex(-1)\n            node.formationIndex = index;\n            node.camp = FightConstant.FightUnitType.Defend;\n        }\n    }\n\n    private _setPosition(node:HeroSpineNode,idx:number,camp:number) {\n        let pos = this.getFomationPos(camp,idx);\n        node.position = pos;\n    }\n\n    public startGame(){\n        this._attackRoleList.forEach(element => {\n            element.play(yy.macro.HeroAnimate.Idle,true);\n            element.changeEquip(\"2\",\"dao2\",\"dao2\");\n        });\n\n        this._defendRoleList.forEach(element => {\n            element.play(yy.macro.HeroAnimate.Idle,true);\n            element.changeEquip(\"2\",\"dao2\",\"dao2\");\n        });\n    }\n\n    public updateView(data) {\n        \n    }\n\n    public getRoleAttacker(index:number):HeroSpineNode{\n        return this._attackRoleList[index];\n    }\n\n    public getRoleDefender(index:number):MonsterSpineNode {\n        return this._defendRoleList[index];\n    }\n\n    /**\n     * getRole\n     */\n    public getRole(camp:number,index:number):HeroSpineNode | MonsterSpineNode {\n        if (camp == FightConstant.FightUnitType.Attack) {\n            return this.getRoleAttacker(index);\n        }else if (camp == FightConstant.FightUnitType.Defend) {\n            return this.getRoleDefender(index);\n        }\n    }\n\n    /**\n     * \n     * @param idx number 阵型索引\n     * @param camp number 所在阵营 \n     */\n    public getFomationPos(camp:number,idx:number):Vec3{\n        let isAttacker:boolean = camp == FightConstant.FightUnitType.Attack;\n        let com = this._mainWorld.getCommonentInLayer(FightConstant.FightLayer.FORMATION,FomationLayer);\n        let pos = isAttacker? com.getAttackPosByIndex(idx) : com.getDefendPosByIndex(idx);\n        return pos.clone();\n    }\n}"]}