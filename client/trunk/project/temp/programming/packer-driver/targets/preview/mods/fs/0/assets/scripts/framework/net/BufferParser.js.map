{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/net/BufferParser.ts"],"names":["BufferParser","Pool","sys","Proto","decodeUtf8","encodeUtf8","Logger","BUFF_SIZE","MSG_ID_SIZE","STR_LEN_SIZE","BYTE_TYPE_SIZE","msgId","_msgId","value","constructor","pool","arrayBuffer","ArrayBuffer","generateMsgArrayBuffer","ab","alloc","_dataView","DataView","msgParams","send","e","setUint16","sendParams","_writeData","_length","ret","slice","free","index","length","element","typeStr","type","setUint8","isLittleEndian","setUint32","byteArray","forEach","i","fields","generateParseData","getUint16","recv","dataParse","_parseData","dataRet","name","num","getUint8","getInt8","getInt16","getUint32","getInt32","strLen","arrayBufferTemp","str"],"mappings":"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","sourcesContent":["import { Pool, sys } from \"cc\";\nimport { Proto } from \"../../app/define/proto_mate\";\nimport { decodeUtf8, encodeUtf8, str2ab } from \"../utils/functions\";\nimport Logger from \"../utils/Logger\";\n\nconst BUFF_SIZE = 1024 * 2;\nconst MSG_ID_SIZE = 2\nconst STR_LEN_SIZE = 2\nconst BYTE_TYPE_SIZE = 4\n\nexport default class BufferParser {\n    private _dataView:DataView\n    private _length = 0;\n    public static pool:Pool<ArrayBuffer> //发送缓冲区对象池(突然觉得不需要对象池，send都是同步的..)\n    \n    private _msgId;\n    public get msgId() {\n        return this._msgId;\n    }\n    public set msgId(value) {\n        this._msgId = value;\n    }\n\n    constructor() {\n        if (!BufferParser.pool) {\n            BufferParser.pool = new Pool<ArrayBuffer>(()=>{\n                let arrayBuffer: ArrayBuffer = new ArrayBuffer(BUFF_SIZE) //发送缓冲区\n                return arrayBuffer\n            },1)\n        }\n    }\n\n    /**\n     * 产出一个发送buffer\n     * @param msgId \n     * @param sendParams 发送参数\n     * @returns \n     */\n    generateMsgArrayBuffer(msgId:number, ...sendParams: any[]):ArrayBuffer {\n        let ab = BufferParser.pool.alloc()\n        this._dataView = new DataView(ab)\n\n        let msgParams = Proto.send[msgId]\n        if (!msgParams) {\n            Logger.e(\"没有此协议：\" + msgId)\n            return \n        }\n\n        //写入id\n        this._dataView.setUint16(0, msgId)\n\n        //写入数据\n        this._writeData(msgParams, sendParams)\n\n        if (this._length == 0) {\n            return\n        }\n\n        if (this._length > BUFF_SIZE) {\n            Logger.e(\"NET: 发送长度超出buffer缓冲区\")\n            return\n        }\n\n        let ret = ab.slice(0, this._length)\n        BufferParser.pool.free(ab)\n        return ret\n    }\n\n\n    private _writeData(msgParams: Array<any>, ...sendParams: any[]) {\n        for (let index = 0; index < msgParams.length; index++) {\n            const element = msgParams[index];\n            let typeStr = element.type\n            let value = sendParams[index]\n            if (typeStr == \"uint8\" || typeStr == \"int8\") {\n                this._dataView.setUint8(this._length, value)\n                this._length++\n            }\n            else if (typeStr == \"uint16\" || typeStr == \"int16\") {\n                this._dataView.setUint16(this._length, value, sys.isLittleEndian)\n                this._length += 2\n            }\n            else if (typeStr == \"uint32\" || typeStr == \"int32\") {\n                this._dataView.setUint32(this._length, value, sys.isLittleEndian)\n                this._length += 4\n            }\n            else if (typeStr == \"string\") {\n                let byteArray = encodeUtf8(value)\n                //写入长度\n                this._dataView.setUint16(this._length, byteArray.length, sys.isLittleEndian)\n                this._length += STR_LEN_SIZE\n\n                //写入字节\n                byteArray.forEach((element, i) => {\n                    this._dataView.setUint8(this._length, element)\n                    this._length++\n                });\n            }\n            else if (typeStr == \"array\") {\n                this._writeData(element.fields, value)\n            }\n            else {\n                Logger.e(\"未知发送类型: \" + typeStr)\n            }\n        }\n    }\n\n    generateParseData(arrayBuffer) {\n        this._dataView = new DataView(arrayBuffer)\n\n        let msgId = this._dataView.getUint16(0, sys.isLittleEndian)\n        this.msgId = msgId\n        this._length += MSG_ID_SIZE\n\n        let msgParams = Proto.recv[msgId]\n        if (!msgParams) {\n            Logger.e(\"Net <====: 没有此id的协议[\" + msgId + \"]\")\n            return\n        }\n\n        let dataParse = this._parseData(msgParams, arrayBuffer)\n        return dataParse\n    }\n\n    private _parseData(msgParams: Array<any>, arrayBuffer: ArrayBuffer, dataRet?) {\n        let dataParse = dataRet || {}\n\n        for (let index = 0; index < msgParams.length; index++) {\n            const element = msgParams[index];\n            let name = element.name\n            let typeStr = element.type\n            if (typeStr == \"uint8\" || typeStr == \"int8\") {\n                let num = this._dataView.getUint8(this._length)\n                dataParse[name] = num\n                this._length++\n            }\n\n            else if (typeStr == \"int8\") {\n                let num = this._dataView.getInt8(this._length)\n                dataParse[name] = num\n                this._length++\n            }\n\n            else if (typeStr == \"uint16\") {\n                let num = this._dataView.getUint16(this._length, sys.isLittleEndian)\n                dataParse[name] = num\n                this._length += 2\n            }\n\n            else if (typeStr == \"int16\") {\n                let num = this._dataView.getInt16(this._length, sys.isLittleEndian)\n                dataParse[name] = num\n                this._length += 2\n            }\n\n            else if (typeStr == \"uint32\") {\n                let num = this._dataView.getUint32(this._length, sys.isLittleEndian)\n                dataParse[name] = num\n                this._length += 4\n            }\n\n            else if (typeStr == \"int32\") {\n                let num = this._dataView.getInt32(this._length, sys.isLittleEndian)\n                dataParse[name] = num\n                this._length += 4\n            }\n\n            else if (typeStr == \"string\") {\n                let strLen = this._dataView.getUint16(this._length)\n                this._length += STR_LEN_SIZE\n\n                let arrayBufferTemp = arrayBuffer.slice(this._length, strLen)\n                let str = decodeUtf8(arrayBufferTemp)\n                dataParse[name] = str\n\n                this._length += strLen\n            }\n            else if (typeStr == \"array\") {\n                dataParse = this._parseData(element.fields, arrayBuffer, dataParse)\n            }\n            else {\n                Logger.e(\"未知发送类型: \" + typeStr)\n                return 0\n            }\n        }\n        return dataParse\n    }\n}"]}