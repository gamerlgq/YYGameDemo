{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/net/NetStateMgr.ts"],"names":["NetStateMgr","G","Protocol","ModelLogin","GameConfig","Singleton","gameMgr","msgEventMgr","socketMgr","constructor","addEventListener","Login","identify","loginCheck","bind","login","loginHandler","addSlowTick","slowTickHandler","data","resultCode","code","model","getModel","getEnterGame","send","sendInnerMsg","Inner","ReloginSuccess","onSocketChange","event","type","msg","reason","netWorkError","FightPause","_reconnect","relogin","FightResume","_status","redirectLoginView","reRun","socketReconnect","reConnect","loginData","getLoginData","deviceInfo","getDeviceInfo","user_id","user_key","channel_key","device_id","IMEI","undefined","args","leftBtnName","rightBtnName","leftCallback","rightCallback","hideLeftButton","showDoubleBtnDialog","requestServerInfo","_request_server_info_time","Date","getTime","now","spaceTime","Math","abs","Server","game_info","dt","clear","netStateMgr","getInstance"],"mappings":"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","sourcesContent":["/*\n * @Author: liuguoqing\n * @Date: 2022-03-02 15:55:24\n * @LastEditors: liuguoqing\n * @LastEditTime: 2022-03-03 15:35:05\n * @Description: file content\n */\n\n\nimport { G } from \"../../app/common/GlobalFunction\";\nimport { DoubleBtnDialogArgsType } from \"../../app/define/ConfigType\";\nimport { Protocol } from \"../../app/define/define\";\nimport { ModelLogin } from \"../../app/model/model\";\nimport { GameConfig } from \"../../GameConfig\";\nimport { Singleton } from \"../components/Singleton\";\nimport { gameMgr } from \"../core/GameMgr\";\nimport { msgEventMgr } from \"../listener/EventMgr\";\nimport { socketMgr } from \"./SocketMgr\";\n\nclass NetStateMgr extends Singleton{\n    private _reconnect;\n    private _request_server_info_time: number = null;\n    private _status: any;\n    \n    // 构造函数;\n    private constructor() {\n        super()\n        msgEventMgr.addEventListener(\n            Protocol.Login.identify,\n            this.loginCheck.bind(this)\n        );\n        msgEventMgr.addEventListener(\n            Protocol.Login.login,\n            this.loginHandler.bind(this)\n        );\n\n        gameMgr.addSlowTick(this.slowTickHandler.bind(this));\n    }\n\n    loginCheck(data: any) {\n        let resultCode = data.code;\n        if (resultCode == 0) {\n            let model = G.getModel(ModelLogin);\n            if (model && model.getEnterGame()) {\n                socketMgr.send(Protocol.Login.login);\n            }\n        }\n    }\n\n    loginHandler(data: any) {\n        let resultCode = data.code;\n        if (resultCode == 0) {\n            let model = G.getModel(ModelLogin);\n            if (model && model.getEnterGame()) {\n                socketMgr.sendInnerMsg(Protocol.Inner.ReloginSuccess);\n            }\n        }\n    }\n\n    onSocketChange(event) {\n        if (event.type == \"close\") {\n            if (event.code == 4888) {\n                return;\n            }\n            let msg = event.reason;\n            if (msg == \"\") {\n                msg = \"与战车失去联系，请指挥官检查网络再尝试。\";\n            }\n            this.netWorkError(msg);\n            socketMgr.sendInnerMsg(Protocol.Inner.FightPause);\n        } else if (event.type == \"open\") {\n            if (this._reconnect) {\n                this.relogin();\n                socketMgr.sendInnerMsg(Protocol.Inner.FightResume);\n            }\n        }\n        this._status = event.type;\n    }\n\n    // 返回登录界面\n    redirectLoginView() {\n        gameMgr.reRun();\n    }\n\n    // 重新链接\n    socketReconnect() {\n        this._reconnect = true;\n        socketMgr.reConnect();\n    }\n\n    relogin() {\n        let model = G.getModel(ModelLogin);\n        if (model && !model.getEnterGame()) {\n            return;\n        }\n        let loginData = model.getLoginData();\n\n        let deviceInfo = gameMgr.getDeviceInfo();\n        socketMgr.send(Protocol.Login.identify, {\n            user_id: loginData.user_id,\n            user_key: loginData.user_key,\n            channel_key: GameConfig,\n            device_id: deviceInfo.IMEI,\n        });\n    }\n\n    netWorkError(msg?: string) {\n        if (msg == \"\" || msg == undefined) {\n            msg = \"与战车失去联系，请指挥官检查网络再尝试。\";\n        }\n        let args:DoubleBtnDialogArgsType = {\n            msg: msg,\n            leftBtnName: \"\",\n            rightBtnName: \"确定\",\n            leftCallback: () => {\n                // this.redirectLoginView();\n            },\n            rightCallback: () => {\n                // this.socketReconnect();\n                this.redirectLoginView();\n            },\n            hideLeftButton: true,\n        };\n\n        G.showDoubleBtnDialog(args);\n    }\n\n    // 请求更新更新服务器时间\n    requestServerInfo() {\n        if (this._status != \"open\") {\n            return;\n        }\n        let model = G.getModel(ModelLogin);\n        if (model && !model.getEnterGame()) {\n            return;\n        }\n\n        this._request_server_info_time = this._request_server_info_time || new Date().getTime();\n        let now = new Date().getTime();\n\n        let spaceTime = Math.abs(now - this._request_server_info_time);\n\n        // -- 20s同步一次\n        if (spaceTime < 20000) {\n            return;\n        }\n        this._request_server_info_time = now;\n        socketMgr.send(Protocol.Server.game_info);\n    }\n\n    slowTickHandler(dt: number) {\n        this.requestServerInfo();\n    }\n\n    clear() {\n        netStateMgr = null;\n    }\n}\n\n// ()();\nexport let netStateMgr = (()=>{\n    return NetStateMgr.getInstance<NetStateMgr>();\n})();\n"]}