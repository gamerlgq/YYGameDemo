{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/language/LanguageLabel.ts"],"names":["CCString","error","Label","RichText","warn","_decorator","ComponentBase","languageManager","ccclass","property","menu","executeInEditMode","LangLabelParamsItem","LanguageLabel","type","displayName","serializable","params","value","_params","dataID","_dataID","string","getStringByIDStr","str","_string","_updateLabel","length","forEach","item","replace","key","spcomp","getComponent","onLoad","node","name","initFontSize","fontSize","getLabelFont","lang","setVars","haskey","i","element","ii","push","update"],"mappings":"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","sourcesContent":["/**\r\n * 所有文本用这一个组件,用于多语言切换\r\n */\r\nimport { CCString, Component, Enum, error, Label, log, RichText, warn, _decorator } from \"cc\";\r\nimport { EDITOR } from \"cc/env\";\r\nimport { Protocol } from \"../../app/define/Protocol\";\r\nimport { ComponentBase } from \"../ui/ComponentBase\";\r\nimport { languageManager } from \"./Language\";\r\n\r\nconst { ccclass, property, menu, executeInEditMode} = _decorator;\r\n\r\n@ccclass(\"LangLabelParamsItem\")\r\nexport class LangLabelParamsItem {\r\n    @property\r\n    key: string = \"\";\r\n    @property\r\n    value: string = \"\";\r\n}\r\n\r\n@ccclass(\"LanguageLabel\")\r\n@executeInEditMode\r\n@menu('ui/language/LanguageLabel')\r\nexport class LanguageLabel extends ComponentBase {\r\n    @property({\r\n        type: LangLabelParamsItem,\r\n        displayName: \"params\"\r\n    })\r\n    private _params: Array<LangLabelParamsItem> = [];\r\n\r\n    @property({\r\n        type: LangLabelParamsItem,\r\n        displayName: \"params\"\r\n    })\r\n    set params(value: Array<LangLabelParamsItem>) {\r\n        this._params = value;\r\n    }\r\n    get params(): Array<LangLabelParamsItem> {\r\n        return this._params || [];\r\n    }\r\n\r\n    @property({ serializable: true })\r\n    private _dataID: string = \"\";\r\n    @property({ type: CCString, serializable: true })\r\n    get dataID(): string {\r\n        return this._dataID || \"\";\r\n    }\r\n    set dataID(value: string) {\r\n        this._dataID = value;\r\n        this.string = languageManager.getStringByIDStr(value)\r\n    }\r\n\r\n    // onEnable() {\r\n    //     if (EDITOR) {\r\n    //         this._updateLabel();\r\n    //     }\r\n    // }\r\n\r\n    private _string:string = \"\"\r\n    set string(str:string) {\r\n        this._string = str\r\n        this._updateLabel()\r\n    }\r\n\r\n    get string(): string {\r\n        let _string = this._string\r\n        if (_string && this._params.length > 0) {\r\n            this._params.forEach((item: LangLabelParamsItem) => {\r\n                _string = _string.replace(`%{${item.key}}`, item.value)\r\n            })\r\n        }\r\n        return _string;\r\n    }\r\n\r\n    private _updateLabel() {\r\n        do {\r\n            let spcomp: any = this.getComponent(Label);\r\n            if (!spcomp) {\r\n                spcomp = this.getComponent(RichText);\r\n                if (!spcomp) {\r\n                    warn(\"[LanguageLabel], 该节点没有cc.Label || cc.RichText组件\");\r\n                    break;\r\n                }\r\n            }\r\n\r\n            spcomp.string = this.string\r\n        }\r\n        while (false);\r\n    }\r\n\r\n    \r\n    initFontSize: number = 0;\r\n\r\n    onLoad() {\r\n        super.onLoad();\r\n\r\n        //暂不做动态变换\r\n        // this.addMsgListener(Protocol.Inner.LanguageChange, this.onLanguageChange.bind(this))\r\n\r\n        // this._needUpdate = true;\r\n        if (!this.getComponent(Label) && !this.getComponent(RichText)) {\r\n            error(this.node.name, this._dataID);\r\n            return;\r\n        }\r\n\r\n        if (this.getComponent(RichText)) {\r\n            this.initFontSize = this.getComponent(RichText)!.fontSize;\r\n        }\r\n\r\n        if (this.getComponent(Label)) {\r\n            this.initFontSize = this.getComponent(Label)!.fontSize;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 默认文本的系统字体名字\r\n     */\r\n    public getLabelFont(lang: string): string {\r\n        switch (lang) {\r\n            case \"zh\":\r\n            case \"tr\": {\r\n                return \"SimHei\";\r\n            }\r\n        }\r\n        return \"Helvetica\";\r\n    }\r\n\r\n    /**\r\n     * 修改多语言参数，采用惰性求值策略\r\n     * @param key 对于i18n表里面的key值\r\n     * @param value 替换的文本\r\n     */\r\n    setVars(key: string, value: string) {\r\n        let haskey = false;\r\n        for (let i = 0; i < this._params.length; i++) {\r\n            let element: LangLabelParamsItem = this._params[i];\r\n            if (element.key === key) {\r\n                element.value = value;\r\n                haskey = true;\r\n            }\r\n        }\r\n        if (!haskey) {\r\n            let ii = new LangLabelParamsItem();\r\n            ii.key = key;\r\n            ii.value = value;\r\n            this._params.push(ii);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        // if (this._needUpdate) {\r\n        //     this.updateLabel();\r\n        //     this._needUpdate = false;\r\n        // }\r\n    }\r\n}\r\n"]}