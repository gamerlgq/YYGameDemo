{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/app/views/login/LoginLayer.ts"],"names":["_decorator","Label","Animation","gameMgr","sceneMgr","LayerBase","G","Protocol","ViewProtocol","ModelLogin","ccclass","property","LoginLayer","start","_rootNode","node","parent","versionLbl","addMsgListener","Login","identify","_onIdentifyHandler","bind","login","_onLoginHandler","Inner","SelectServer","_onSelectServerHandler","CloseNoticeView","playShowEnterBtnAnimate","_addNewGuideLayer","_serverInfoRequest","data","_enterGame","cb","_openLoginAccount","sendCreateView","LoginAccountLayer","_connectServer","model","getModel","loginData","getLoginData","_loginServer","ResLoadingLayer","onClickEnterGameBtn","event","customEventData","onClickServerListBtn","showMsgTips","com","getComponent","play"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Label, Prefab, instantiate, log, EventTouch, AnimationClip, Animation } from 'cc';\nimport { gameMgr } from '../../../framework/core/GameMgr';\nimport { sceneMgr } from '../../../framework/core/SceneMgr';\nimport { storage } from '../../../framework/core/storage/Storage';\nimport { ResourcesLoader } from '../../../framework/data/ResourcesLoader';\nimport { httpMgr } from '../../../framework/net/HttpMgr';\nimport { socketMgr } from '../../../framework/net/SocketMgr';\nimport { LayerBase } from '../../../framework/ui/LayerBase';\nimport { G } from '../../common/GlobalFunction';\nimport { Protocol } from '../../define/Protocol';\nimport { ViewProtocol } from '../../define/ViewProtocol';\nimport { ModelLogin } from '../../model/model';\n\nconst { ccclass, property } = _decorator;\n \n@ccclass('LoginLayer')\nexport class LoginLayer extends LayerBase {\n\n    @property(Label)\n    serverName: Label = null;\n\n    @property(Label)\n    versionLbl: Label = null;\n\n    private _rootNode = null;\n\n    start(){\n        // super.onLoad();\n        this._rootNode = this.node.parent;\n        // set version\n        if (this.versionLbl) {\n            // FileHelper.load(\"Txt/showVer\", (data) => {\n            //     cc.log(\"showVer txt:\", data.text);\n            //     let showVer = data.text || \"1.0\";\n            //     let realVer = GameConfig.realVer || \"0.0\";\n            //     this.versionLbl.string = \"ver \" + showVer.toString() + \".\" + realVer.toString();\n            // });\n        }\n\n        this.addMsgListener(Protocol.Login.identify,this._onIdentifyHandler.bind(this));\n        this.addMsgListener(Protocol.Login.login,this._onLoginHandler.bind(this));\n        this.addMsgListener(Protocol.Inner.SelectServer,this._onSelectServerHandler.bind(this));\n        this.addMsgListener(Protocol.Inner.CloseNoticeView,this.playShowEnterBtnAnimate.bind(this)); \n        // 新手引导层\n        this._addNewGuideLayer(() => {\n            this._serverInfoRequest();\n        });\n    }\n\n    private _onIdentifyHandler(data:any) {\n        // let model = gameMgr.getModel(ModelLogin);\n        // let serverData = model.getSelectServerData();\n        // let param: any = {};\n        // let serverInfo: any = {};\n        // serverInfo.address = serverData.address;\n        // serverInfo.port = serverData.port;\n        // serverInfo.id = serverData.id;\n        // param.serverInfo = serverInfo;\n        // socketMgr.send(Protocol.Login.login);\n    }\n\n    private _onLoginHandler(data:any) {\n        // if (data.code == 0) {\n            this._enterGame();\n        // } else if (data.code == 1) {\n            // SocketMgr.getInstance().send(Protocol.Login.creator);\n        // }\n    }\n\n    private _onSelectServerHandler(data:any) {\n        // let model = gameMgr.getModel(ModelLogin);\n        // let serverData = model.getSelectServerData();\n        // this.serverName.string = serverData.name;\n        // storage.set(\"SelectServerData\",serverData)\n    }\n\n    private _addNewGuideLayer(cb: Function) {\n        // ResourcesLoader.load(\"prefab/xinshou_ui/xinshou_mai_ui\", (prefab: Prefab) => {\n        //     let layer = instantiate(prefab);\n        //     sceneMgr.setNewGuideLayer(layer);\n            cb();\n        // });\n    }\n\n    private _serverInfoRequest() {\n        // httpMgr.get((msg) => {\n            // if (msg.code == 0) {\n            //     let data = msg.data;\n            //     let serverList = data.sg[0].sl;\n\n            //     if (!serverList || serverList.length == 0) {\n            //         GlobalFunction.ShowMsgTips(GetTranslateCode(175));\n            //         return;\n            //     }\n        \n                // let model = gameMgr.getModel(ModelServerInfo);\n                // model.setSeverList(serverList);\n\n                this._openLoginAccount();\n            // } else {\n            //     GlobalFunction.ShowMsgTips(GetTranslateCode(176));\n            // }\n        // }, GameConfig.ServerListUrl + \"/static/server/\" + GameConfig.QDKey + \".json\");\n    }\n\n    private _openLoginAccount() {\n        sceneMgr.sendCreateView(ViewProtocol.LoginAccountLayer);\n    }\n\n    private _connectServer() {\n            let model = gameMgr.getModel(ModelLogin);\n            let loginData = model.getLoginData();\n    \n            // GET service + /client/which_server?user_id=xxx&channel_key=xxxxx&version=yyyy\n            // user_id 账号唯一标识 内网包是上面接口的user_id sdk包是sdk唯一用户id\n            // channel_key 渠道key\n            // version 客户端版本\n            // let realVer = GameConfig.realVer || \"0.0\";\n            // let channelKey = GameConfig.QDKey;\n            // let url =\n            //     GameConfig.ServerUrl +\n            //     \"/client/which_server?user_id=\" +\n            //     loginData.user_id +\n            //     \"&channel_key=\" +\n            //     channelKey +\n            //     \"&version=\" +\n            //     realVer;\n            // httpMgr.get((msg) => {\n            //     if (msg.code == 0) {\n            //         if (msg.data.result_code == 0) {\n            //             let serverId = msg.data.server_id;\n            //             let modelServer = gameMgr.getModel(ModelServerInfo);\n            //             let serverData = modelServer.getServerInfoById(serverId);\n            //             model.setSelectServerData(serverData);\n    \n            //             socketMgr.connect(\n            //                 serverData.address,\n            //                 serverData.port,\n            //                 (event) => {\n            //                     //打点\n            //                     let param: any = {};\n            //                     let serverInfo: any = {};\n            //                     serverInfo.address = serverData.address;\n            //                     serverInfo.port = serverData.port;\n            //                     serverInfo.id = serverData.id;\n            //                     param.serverInfo = serverInfo;\n                                this._loginServer();\n            //                 },\n            //                 (event) => {\n            //                     log(event);\n            //                 }\n            //             );\n            //         } else {\n            //             G.showMsgTips(GetTranslateCode(178));\n            //         }\n            //     }\n            // }, url);\n        }\n\n    private _loginServer() {\n        // let model = gameMgr.getModel(ModelLogin);\n        // let loginData = model.getLoginData();\n\n        // let deviceInfo = gameMgr.getDeviceInfo();\n        // socketMgr.send(Protocol.Login.identify, {\n        //     user_id: loginData.user_id,\n        //     user_key: loginData.user_key,\n        //     channel_key: GameConfig.QDKey,\n        //     device_id: deviceInfo.IMEI,\n        // });\n\n\n        // 单机模式直接进入游戏\n        this._enterGame();\n    }\n\n    private _enterGame() {\n        //打点\n           // logDot(DotIDS.loginGameSuccess);\n           sceneMgr.sendCreateView(ViewProtocol.ResLoadingLayer);\n           // 功能开启监听层\n           // sceneMgr.sendCreateView(ViewProtocol.SystemOpenLayer);\n           // model.setEnterGame(true);\n           // NotifyHelper.getInstance().startNotify();\n    }\n\n    // 点击进入游戏\n    onClickEnterGameBtn(event:EventTouch,customEventData:string){\n        this._enterGame();\n    }\n\n    // 点击打开服务器列表\n    onClickServerListBtn(event:EventTouch,customEventData:string){\n        G.showMsgTips(\"系统未开发\");\n    }\n\n    playShowEnterBtnAnimate(){\n        let com = this._rootNode.getComponent(Animation);\n        com.play();\n    }\n}\n"]}