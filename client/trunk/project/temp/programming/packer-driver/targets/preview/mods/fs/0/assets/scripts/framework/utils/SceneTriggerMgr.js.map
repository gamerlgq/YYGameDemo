{"version":3,"sources":["file:///Users/steven/Workspaces/CocosCreatorProjects/3D/YYGameDemo/client/trunk/project/assets/scripts/framework/utils/SceneTriggerMgr.ts"],"names":["SceneTriggerMgr","log","Singleton","sceneMgr","constructor","_listeners","Map","_listenerHandleIndex","addTriggrt","pSceneName","pHandler","pPriority","get","set","handle","push","_sortTriggerByPriority","dispatchEvent","delArray","index","length","event","listener","ret","element","splice","removeTriggrtListener","key","removeIndex","check","frontLayer","_getCurFrontLayer","sceneName","sort","idA","idB","layer","getCurFrontLayer","clear","sceneTriggerMgr","getInstance"],"mappings":"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","sourcesContent":["/*\n * @Author: Chenning\n * @Date: 2021-02-04 17:23:50\n * @LastEditTime: 2022-01-24 10:22:53\n * @LastEditors: Gino\n */\n// 场景触发器，当然设置界面名字处于最前时候会回调\n//  只有在切换table的时候会主动检查，不够可以找我聊\n\nimport { log } from \"cc\";\nimport { Singleton } from \"../components/Singleton\";\nimport { sceneMgr } from \"../core/SceneMgr\";\n\n//  监听 使用范例\n//  @参数\n// -- #1.界面名字\n// -- #2.回调方法 返回值为false即吞掉事件，后面的不触发\n// -- #3.优先级, 默认为1, 越大优先级越高\n// -- SFSceneTriggerMgr.getInstance().addTriggrt(\"GameMainUI\", ()=> { return true; }, 1);\n// -- SFSceneTriggerMgr.getInstance().addTriggrt(\"GameMainUI\", ()=> { return false; }, 4);\n// -- SFSceneTriggerMgr.getInstance().addTriggrt(\"GameMainUI\", ()=> { return true; }, 2);\n// -- SFSceneTriggerMgr.getInstance().addTriggrt(\"GameMainUI\", ()=> { return true; }, 3);\n// -- SFSceneTriggerMgr.getInstance().addTriggrt(\"scens7\", \"2\");\n// -- 主动检查 使用范例\n// -- SFSceneTriggerMgr.getInstance().check();\n\n\nexport class SceneTriggerMgr extends Singleton {\n    _listeners: Map<string, Array<any>>;\n    _listenerHandleIndex;\n    // 构造函数\n    constructor() {\n        super();\n        this._listeners = new Map();\n        this._listenerHandleIndex = 0;\n    }\n\n    // -- -- -- -- --\n    // 添加监听事件\n    // #1.界面名字\n    // #2.回调方法 返回值为false即吞掉事件，后面的不触发\n    // #3.优先级, 默认为1, 越大优先级越高\n    addTriggrt(pSceneName, pHandler, pPriority) {\n        if (this._listeners.get(pSceneName) == null) {\n            this._listeners.set(pSceneName, []);\n        }\n\n        // 默认优先级1\n        pPriority = pPriority || 1;\n        this._listenerHandleIndex += 1;\n        let handle = \"Trigger_\" + this._listenerHandleIndex;\n\n        this._listeners.get(pSceneName).push([handle, pHandler, pPriority]);\n        // 按照优先级重新排序\n        this._sortTriggerByPriority(pSceneName);\n        return handle;\n    }\n\n    // 分发事件\n    dispatchEvent(pSceneName) {\n        if (this._listeners.get(pSceneName) == null) {\n            return;\n        }\n        let delArray;\n        for (let index = 0; index < this._listeners.get(pSceneName).length; index++) {\n            const event = this._listeners.get(pSceneName)[index];\n\n            let handle = event[0];\n            let listener = event[1];\n            log(\" ==========  SceneTriggerMgr go   \" + pSceneName + handle);\n            let ret = listener(event, pSceneName);\n            if (ret == false) {\n                break;\n            } else if (ret == \"__REMOVE__\") {\n                if (!delArray) {\n                    delArray = [];\n                }\n                delArray.push(index);\n            }\n        }\n        if (delArray && delArray.length > 0) {\n            for (let index = 0; index < delArray.length; index++) {\n                const element = delArray[index];\n                this._listeners.get(pSceneName).splice(element, 1);\n            }\n        }\n    }\n\n    // 删除监听事件\n    removeTriggrtListener(pSceneName, key) {\n        if (this._listeners.get(pSceneName) == null) {\n            return;\n        }\n        let removeIndex = -1;\n        for (let index = 0; index < this._listeners.get(pSceneName).length; index++) {\n            const event = this._listeners.get(pSceneName)[index];\n            let handle = event[0];\n            let listener = event[1];\n\n            if (key == handle || key == listener) {\n                removeIndex = index;\n                break;\n            }\n        }\n        if (removeIndex != -1) {\n            this._listeners.get(pSceneName).splice(removeIndex, 1);\n        }\n    }\n\n    //  场景管理器调用检查方法\n    check() {\n        let frontLayer = this._getCurFrontLayer();\n\n        if (frontLayer) {\n            let sceneName = frontLayer[\"name\"];\n            if (\"__MainGroup\" == sceneName) {\n                sceneName = frontLayer[\"obj\"][\"name\"];\n            }\n\n            if (sceneName == null) {\n                return;\n            }\n            this.dispatchEvent(sceneName);\n        }\n    }\n\n    //  -- -- -- -- -- -- --\n    //  [Privete Function]\n    //\n\n    //  优先级排序\n    private _sortTriggerByPriority(pSceneName) {\n        this._listeners.get(pSceneName).sort((idA, idB) => {\n            return idB - idA;\n        });\n    }\n\n    // 获取最前面的层\n    private _getCurFrontLayer() {\n        let layer = sceneMgr.getCurFrontLayer();\n        return layer;\n    }\n\n    // 覆盖销毁\n    clear() {\n        this._listeners.clear();\n        this._listenerHandleIndex = 0;\n        sceneTriggerMgr = null;\n    }\n}\n\nexport let sceneTriggerMgr = (() => {\n    return SceneTriggerMgr.getInstance<SceneTriggerMgr>();\n})();\n"]}